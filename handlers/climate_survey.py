import html
import logging
from enum import Enum

from telegram import Update, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
)
from telegram.constants import ParseMode

from models import ClimateState
from core import settings, database
from utils.helpers import (
    get_user_data_from_update,
    safe_answer_callback_query,
    send_or_edit_message,
    add_to_sheets_queue,
    get_now
)
from utils.keyboards import (
    RESTAURANT_OPTIONS,
    GENDER_OPTIONS,
    EXIT_POSITION_OPTIONS,
    YES_NO_OPTIONS_CLIMATE,
    YES_NO_MAYBE_OPTIONS,
    build_inline_keyboard
)
from handlers.common import cancel, prompt_to_use_button

logger = logging.getLogger(__name__)


async def start_climate_survey_flow(update: Update, context: ContextTypes.DEFAULT_TYPE) -> ClimateState:
    query = update.callback_query
    await safe_answer_callback_query(query)
    context.user_data.clear()
    context.user_data['_in_climate_survey'] = True
    context.user_data['chat_id'] = query.message.chat_id

    greeting_text = (
        "–ü—Ä–∏–≤–µ—Ç! –ú—ã —Å—Ç—Ä–µ–º–∏–º—Å—è —Å–¥–µ–ª–∞—Ç—å ¬´–ú–∞—Ä—á–µ–ª–ª–∏—Å¬ª –ª—É—á—à–∏–º –º–µ—Å—Ç–æ–º –¥–ª—è —Ä–∞–±–æ—Ç—ã –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞. üöÄ\n\n"
        "–£—Å–ø–µ—Ö –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ ‚Äî —ç—Ç–æ –∑–∞—Å–ª—É–≥–∞ –≤—Å–µ–π –∫–æ–º–∞–Ω–¥—ã, –∏ —Ç–≤–æ–µ –º–Ω–µ–Ω–∏–µ –∏–≥—Ä–∞–µ—Ç –≤ —ç—Ç–æ–º –∫–ª—é—á–µ–≤—É—é —Ä–æ–ª—å.\n\n"
        "–ü–æ–º–æ–≥–∏ –Ω–∞–º —Å—Ç–∞—Ç—å –µ—â—ë –ª—É—á—à–µ! –ü—Ä–æ–π–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —ç—Ç–æ—Ç –Ω–µ–±–æ–ª—å—à–æ–π <b>–∞–Ω–æ–Ω–∏–º–Ω—ã–π –æ–ø—Ä–æ—Å</b>. "
        "–¢–≤–æ–∏ —á–µ—Å—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã ‚Äî —ç—Ç–æ —Ü–µ–Ω–Ω—ã–π –≤–∫–ª–∞–¥ –≤ –Ω–∞—à–µ –æ–±—â–µ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ.")
    await send_or_edit_message(update, context, greeting_text, None)

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–î–∞", callback_data="climate_employed_yes")],
        [InlineKeyboardButton("–ù–µ—Ç", callback_data="climate_employed_no")],
    ])
    message_text = "–î–ª—è –Ω–∞—á–∞–ª–∞, –ø–æ–¥—Å–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>—Ä–∞–±–æ—Ç–∞–µ—à—å –ª–∏ —Ç—ã —Å–µ–π—á–∞—Å –≤ –∫–æ–º–ø–∞–Ω–∏–∏?</b>"
    await send_or_edit_message(update, context, message_text, keyboard)

    return ClimateState.AWAIT_EMPLOYMENT_STATUS


async def climate_employment_status_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> ClimateState | int:
    query = update.callback_query
    await safe_answer_callback_query(query)

    if query.data == "climate_employed_no":
        await send_or_edit_message(update, context, "–°–ø–∞—Å–∏–±–æ –∑–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç—å. –≠—Ç–æ—Ç –æ–ø—Ä–æ—Å –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤. –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!")
        context.user_data.clear()
        return ConversationHandler.END

    keyboard = build_inline_keyboard(RESTAURANT_OPTIONS, columns=2)
    message_text = "–û—Ç–ª–∏—á–Ω–æ! –¢–æ–≥–¥–∞ –Ω–∞—á–Ω–µ–º.\n\n<b>–í–æ–ø—Ä–æ—Å 1/17</b>\n–í –∫–∞–∫–æ–º <b>—Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ</b> —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å?"
    await send_or_edit_message(update, context, message_text, keyboard)
    return ClimateState.RESTAURANT


async def climate_restaurant_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> ClimateState:
    query = update.callback_query
    await safe_answer_callback_query(query)
    restaurant = next((b[0] for b in RESTAURANT_OPTIONS if b[1] == query.data), "N/A")
    restaurant_code = query.data.replace("res_", "")
    context.user_data["climate_restaurant"] = restaurant
    context.user_data["climate_restaurant_code"] = restaurant_code

    keyboard = build_inline_keyboard(GENDER_OPTIONS, columns=2)
    text = f"–†–µ—Å—Ç–æ—Ä–∞–Ω: <b>{html.escape(restaurant)}</b>.\n\n<b>–í–æ–ø—Ä–æ—Å 2/17</b>\n–£–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π <b>–ø–æ–ª</b>:"
    await send_or_edit_message(update, context, text, keyboard)
    return ClimateState.GENDER


async def climate_gender_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> ClimateState:
    query = update.callback_query
    await safe_answer_callback_query(query)
    gender = next((b[0] for b in GENDER_OPTIONS if b[1] == query.data), "N/A")
    context.user_data["climate_gender"] = gender.replace('üë®', '').replace('üë©', '').strip()

    keyboard = build_inline_keyboard(EXIT_POSITION_OPTIONS, columns=2)
    text = "<b>–í–æ–ø—Ä–æ—Å 3/17</b>\n–£–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ—é <b>–¥–æ–ª–∂–Ω–æ—Å—Ç—å</b>:"
    await send_or_edit_message(update, context, text, keyboard)
    return ClimateState.POSITION


async def climate_position_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> ClimateState:
    query = update.callback_query
    await safe_answer_callback_query(query)
    position = next((b[0] for b in EXIT_POSITION_OPTIONS if b[1] == query.data), "N/A")
    context.user_data["climate_position"] = position

    keyboard = build_inline_keyboard(YES_NO_OPTIONS_CLIMATE, columns=2)
    text = f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: <b>{html.escape(position)}</b>.\n\n<b>–í–æ–ø—Ä–æ—Å 4/17</b>\n–ì–æ—Ç–æ–≤(–∞) –ª–∏ —Ç—ã <b>–ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å</b> –Ω–∞—à—É –∫–æ–º–ø–∞–Ω–∏—é –∫–∞–∫ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è –¥—Ä—É–∑—å—è–º –∏–ª–∏ –±–ª–∏–∑–∫–∏–º?"
    await send_or_edit_message(update, context, text, keyboard)
    return ClimateState.RECOMMEND


async def climate_recommend_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> ClimateState:
    query = update.callback_query
    await safe_answer_callback_query(query)
    recommend = "–î–∞" if query.data == "climate_yes" else "–ù–µ—Ç"
    context.user_data["climate_recommend"] = recommend

    text = f"–¢–≤–æ–π –æ—Ç–≤–µ—Ç: <b>{html.escape(recommend)}</b>.\n\n<b>–í–æ–ø—Ä–æ—Å 5/17</b>\n<b>–ü–æ—á–µ–º—É</b> —Ç—ã —Ç–∞–∫ —Å—á–∏—Ç–∞–µ—à—å? (–∫—Ä–∞—Ç–∫–æ)"
    await send_or_edit_message(update, context, text)
    return ClimateState.RECOMMEND_REASON


async def climate_recommend_reason_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> ClimateState:
    context.user_data["climate_recommend_reason"] = update.message.text.strip()
    keyboard = build_inline_keyboard(YES_NO_MAYBE_OPTIONS, columns=2)
    text = "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å —Å–µ—Ä–∏—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.\n\n" \
           "<b>–í–æ–ø—Ä–æ—Å 6/17</b>\n–Ø <b>–∑–Ω–∞—é</b>, —á—Ç–æ –æ—Ç –º–µ–Ω—è –æ–∂–∏–¥–∞–µ—Ç—Å—è –Ω–∞ —Ä–∞–±–æ—Ç–µ."
    await send_or_edit_message(update, context, text, keyboard)
    return ClimateState.EXPECTATIONS


async def climate_generic_yes_no_maybe_handler(
        update: Update,
        context: ContextTypes.DEFAULT_TYPE,
        current_data_key: str,
        next_state: Enum | None,
        next_question_number: int,
        next_question_text: str,
) -> Enum | int:
    query = update.callback_query
    await safe_answer_callback_query(query)

    answer_text = next((b[0] for b in YES_NO_MAYBE_OPTIONS if b[1] == query.data), "N/A")
    context.user_data[current_data_key] = answer_text.replace('‚úÖ ', '').replace('‚òëÔ∏è ', '').replace('‚ùå ', '').replace(
        'üö´ ', '').strip()

    if next_state:
        keyboard = build_inline_keyboard(YES_NO_MAYBE_OPTIONS, columns=2)
        text = f"<b>–í–æ–ø—Ä–æ—Å {next_question_number}/17</b>\n\n{next_question_text}"
        await send_or_edit_message(update, context, text, keyboard)
        return next_state
    else:
        await climate_final_question_answered(update, context)
        return ConversationHandler.END


async def climate_expectations_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> Enum | int:
    return await climate_generic_yes_no_maybe_handler(
        update, context, "climate_expectations", ClimateState.BEST_ABILITY, 7,
        "–£ –º–µ–Ω—è –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–µ–ª–∞—Ç—å —Ç–æ, —á—Ç–æ —è –¥–µ–ª–∞—é <b>–ª—É—á—à–µ –≤—Å–µ–≥–æ</b> üí™",
    )


async def climate_best_ability_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> Enum | int:
    return await climate_generic_yes_no_maybe_handler(
        update, context, "climate_best_ability", ClimateState.PRAISE, 8,
        "–í –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–µ–º—å –¥–Ω–µ–π –∫—Ç–æ-—Ç–æ –Ω–∞ —Ä–∞–±–æ—Ç–µ <b>–ø–æ—Ö–≤–∞–ª–∏–ª</b> –º–µ–Ω—è –∏–ª–∏ –æ—Ü–µ–Ω–∏–ª –º–æ—é —Ä–∞–±–æ—Ç—É üéâ",
    )


async def climate_praise_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> Enum | int:
    return await climate_generic_yes_no_maybe_handler(
        update, context, "climate_praise", ClimateState.DEVELOPMENT_CARE, 9,
        "–ú–æ–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –∏–ª–∏ –∫—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–π –Ω–∞ —Ä–∞–±–æ—Ç–µ <b>–∑–∞–±–æ—Ç–∏—Ç—Å—è</b> –æ –º–æ–µ–º <b>—Ä–∞–∑–≤–∏—Ç–∏–∏</b> üå±",
    )


async def climate_development_care_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> Enum | int:
    return await climate_generic_yes_no_maybe_handler(
        update, context, "climate_development_care", ClimateState.OPINION, 10,
        "–ù–∞ —Ä–∞–±–æ—Ç–µ —É –º–µ–Ω—è –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å <b>–≤—ã—Å–∫–∞–∑–∞—Ç—å —Å–≤–æ–µ –º–Ω–µ–Ω–∏–µ</b> üó£Ô∏è",
    )


async def climate_opinion_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> Enum | int:
    return await climate_generic_yes_no_maybe_handler(
        update, context, "climate_opinion", ClimateState.COLLEAGUE_SUCCESS, 11,
        "–ú–æ–∏ <b>–∫–æ–ª–ª–µ–≥–∏</b> –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –Ω–∞ <b>—É—Å–ø–µ—Ö</b> ü§ù",
    )


async def climate_colleague_success_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> Enum | int:
    return await climate_generic_yes_no_maybe_handler(
        update, context, "climate_colleague_success", ClimateState.MISSION, 12,
        "–£ –Ω–∞—Å –Ω–∞ —Ä–∞–±–æ—Ç–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç <b>–º–∏—Å—Å–∏—è –∏–ª–∏ —Ü–µ–ª—å</b>, –∫–æ—Ç–æ—Ä–∞—è –º–µ–Ω—è –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç üéØ",
    )


async def climate_mission_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> Enum | int:
    return await climate_generic_yes_no_maybe_handler(
        update, context, "climate_mission", ClimateState.IMPORTANCE, 13,
        "–Ø —á—É–≤—Å—Ç–≤—É—é, —á—Ç–æ –º–æ—è —Ä–∞–±–æ—Ç–∞ <b>–≤–∞–∂–Ω–∞</b> ‚≠ê",
    )


async def climate_importance_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> Enum | int:
    return await climate_generic_yes_no_maybe_handler(
        update, context, "climate_importance", ClimateState.GROWTH_OPPORTUNITY, 14,
        "–£ –º–µ–Ω—è –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å <b>—Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –∏ —Ä–∞—Å—Ç–∏</b> –≤ —Å–≤–æ–µ–π –∫–∞—Ä—å–µ—Ä–µ üìà",
    )


async def climate_growth_opportunity_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> Enum | int:
    return await climate_generic_yes_no_maybe_handler(
        update, context, "climate_growth_opportunity", ClimateState.SUPPORT, 15,
        "–Ø –ø–æ–ª—É—á–∞—é <b>–ø–æ–¥–¥–µ—Ä–∂–∫—É</b> –æ—Ç —Å–≤–æ–µ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–≤–æ–µ–π —Ä–∞–±–æ—Ç—ã ü§ó",
    )


async def climate_support_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> Enum | int:
    return await climate_generic_yes_no_maybe_handler(
        update, context, "climate_support", ClimateState.FRIENDS, 16,
        "–ù–∞ —Ä–∞–±–æ—Ç–µ —É –º–µ–Ω—è –µ—Å—Ç—å <b>—Ö–æ—Ä–æ—à–∏–µ –¥—Ä—É–∑—å—è</b> üòä",
    )


async def climate_friends_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> Enum | int:
    return await climate_generic_yes_no_maybe_handler(
        update, context, "climate_friends", ClimateState.TEAM_PART, 17,
        "–í —Å–≤–æ–µ–π —Ä–∞–±–æ—Ç–µ —è —á—É–≤—Å—Ç–≤—É—é —Å–µ–±—è <b>—á–∞—Å—Ç—å—é –∫–æ–º–∞–Ω–¥—ã</b> üë•",
    )


async def climate_team_part_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    return await climate_generic_yes_no_maybe_handler(
        update, context, "climate_team_part", None, 0, ""
    )


async def climate_final_question_answered(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id, user_name, _ = get_user_data_from_update(update)
    data = context.user_data
    restaurant_code = data.get("climate_restaurant_code")
    timestamp = get_now().strftime("%Y-%m-%d %H:%M:%S")

    q_keys = [
        "restaurant", "gender", "position", "recommend", "recommend_reason", "expectations",
        "best_ability", "praise", "development_care", "opinion", "colleague_success",
        "mission", "importance", "growth_opportunity", "support", "friends", "team_part"
    ]
    q_answers = [data.get(f"climate_{key}", "N/A") for key in q_keys]
    row_data = [timestamp, user_name] + q_answers

    await add_to_sheets_queue(settings.CLIMATE_SURVEY_SHEET_NAME, row_data)
    await database.log_survey_completion('climate', user_id, restaurant_code)

    await send_or_edit_message(
        update, context,
        "‚úÖ <b>–û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ–π –≤–∫–ª–∞–¥! üôè –¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –ø–æ–º–æ–≥—É—Ç –Ω–∞–º —Å–¥–µ–ª–∞—Ç—å —Ä–∞–±–æ—á—É—é —Å—Ä–µ–¥—É –≤ ¬´–ú–∞—Ä—á–µ–ª–ª–∏—Å¬ª –µ—â–µ –ª—É—á—à–µ."
    )
    context.user_data.clear()


climate_survey_conversation_handler = ConversationHandler(
    entry_points=[CallbackQueryHandler(start_climate_survey_flow, pattern=f"^{settings.CALLBACK_START_CLIMATE}$")],
    states={
        ClimateState.AWAIT_EMPLOYMENT_STATUS: [
            CallbackQueryHandler(climate_employment_status_selected, pattern="^climate_employed_")],
        ClimateState.RESTAURANT: [CallbackQueryHandler(climate_restaurant_selected, pattern="^res_"),
                                  MessageHandler(filters.TEXT, prompt_to_use_button)],
        ClimateState.GENDER: [CallbackQueryHandler(climate_gender_selected, pattern="^climate_gender_"),
                              MessageHandler(filters.TEXT, prompt_to_use_button)],
        ClimateState.POSITION: [CallbackQueryHandler(climate_position_selected, pattern="^exit_pos_"),
                                MessageHandler(filters.TEXT, prompt_to_use_button)],
        ClimateState.RECOMMEND: [CallbackQueryHandler(climate_recommend_selected, pattern="^climate_(yes|no)$"),
                                 MessageHandler(filters.TEXT, prompt_to_use_button)],
        ClimateState.RECOMMEND_REASON: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, climate_recommend_reason_received)],
        ClimateState.EXPECTATIONS: [CallbackQueryHandler(climate_expectations_selected, pattern="^climate_q_"),
                                    MessageHandler(filters.TEXT, prompt_to_use_button)],
        ClimateState.BEST_ABILITY: [CallbackQueryHandler(climate_best_ability_selected, pattern="^climate_q_"),
                                    MessageHandler(filters.TEXT, prompt_to_use_button)],
        ClimateState.PRAISE: [CallbackQueryHandler(climate_praise_selected, pattern="^climate_q_"),
                              MessageHandler(filters.TEXT, prompt_to_use_button)],
        ClimateState.DEVELOPMENT_CARE: [CallbackQueryHandler(climate_development_care_selected, pattern="^climate_q_"),
                                        MessageHandler(filters.TEXT, prompt_to_use_button)],
        ClimateState.OPINION: [CallbackQueryHandler(climate_opinion_selected, pattern="^climate_q_"),
                               MessageHandler(filters.TEXT, prompt_to_use_button)],
        ClimateState.COLLEAGUE_SUCCESS: [
            CallbackQueryHandler(climate_colleague_success_selected, pattern="^climate_q_"),
            MessageHandler(filters.TEXT, prompt_to_use_button)],
        ClimateState.MISSION: [CallbackQueryHandler(climate_mission_selected, pattern="^climate_q_"),
                               MessageHandler(filters.TEXT, prompt_to_use_button)],
        ClimateState.IMPORTANCE: [CallbackQueryHandler(climate_importance_selected, pattern="^climate_q_"),
                                  MessageHandler(filters.TEXT, prompt_to_use_button)],
        ClimateState.GROWTH_OPPORTUNITY: [
            CallbackQueryHandler(climate_growth_opportunity_selected, pattern="^climate_q_"),
            MessageHandler(filters.TEXT, prompt_to_use_button)],
        ClimateState.SUPPORT: [CallbackQueryHandler(climate_support_selected, pattern="^climate_q_"),
                               MessageHandler(filters.TEXT, prompt_to_use_button)],
        ClimateState.FRIENDS: [CallbackQueryHandler(climate_friends_selected, pattern="^climate_q_"),
                               MessageHandler(filters.TEXT, prompt_to_use_button)],
        ClimateState.TEAM_PART: [CallbackQueryHandler(climate_team_part_selected, pattern="^climate_q_"),
                                 MessageHandler(filters.TEXT, prompt_to_use_button)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
    name="climate_survey_conv",
    persistent=True,
    per_message=False,
    conversation_timeout=settings.CONVERSATION_TIMEOUT_SECONDS
)