import html
import logging
from datetime import timedelta

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
)
from telegram.constants import ParseMode

from models import CandidateFeedbackState, OnboardingFollowupState
from core import settings, database
from utils.helpers import (
    safe_answer_callback_query,
    send_or_edit_message,
    add_to_sheets_queue,
    build_inline_keyboard,
    get_now,
    get_user_data_from_update,
    send_new_menu_message
)
from utils.keyboards import CANDIDATE_FEEDBACK_RATING_OPTIONS, YES_NO_OPTIONS, RESTAURANT_OPTIONS
from handlers.common import cancel, prompt_to_use_button
from handlers.onboarding import start_onboarding_flow

logger = logging.getLogger(__name__)

async def schedule_candidate_feedback(context: ContextTypes.DEFAULT_TYPE):
    job_data = context.job.data
    candidate_id = job_data["candidate_id"]

    text = "–ü—Ä–∏–≤–µ—Ç –µ—â–µ —Ä–∞–∑! üëã –ü—Ä–æ—à–ª–æ –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ —Ç–≤–æ–µ–≥–æ –≤–∏–∑–∏—Ç–∞. –ë—É–¥–µ–º –æ—á–µ–Ω—å –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã, –µ—Å–ª–∏ —Ç—ã –æ—Ç–≤–µ—Ç–∏—à—å –Ω–∞ 4 –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–∞ –æ –≤—Å—Ç—Ä–µ—á–µ. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ."
    keyboard = InlineKeyboardMarkup(
        [[InlineKeyboardButton("‚úçÔ∏è –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å (1 –º–∏–Ω—É—Ç–∞)",
                               callback_data=settings.CALLBACK_START_CANDIDATE_FEEDBACK)]])

    try:
        await context.bot.send_message(candidate_id, text, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"Failed to send candidate feedback poll to {candidate_id}: {e}")


async def schedule_onboarding_noshow_check(context: ContextTypes.DEFAULT_TYPE):
    job_data = context.job.data
    candidate_id = job_data.get("candidate_id")

    if not candidate_id:
        logger.error("No candidate_id in schedule_onboarding_noshow_check job.")
        return

    if await database.is_survey_completed("onboarding", candidate_id):
        logger.info(f"Candidate {candidate_id} has completed onboarding survey. No-show check cancelled.")
        return

    logger.info(f"Starting onboarding NO-SHOW check for candidate {candidate_id}.")
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–î–∞, –≤—Å–µ –≤ —Å–∏–ª–µ / —Å–º–µ–Ω–∞ –ø–µ—Ä–µ–Ω–µ—Å–ª–∞—Å—å", callback_data=settings.CALLBACK_ONBOARDING_FOLLOWUP_YES)],
        [InlineKeyboardButton("–ù–µ—Ç, —è –ø–µ—Ä–µ–¥—É–º–∞–ª(–∞) / –Ω–µ –º–æ–≥—É –≤—ã–π—Ç–∏", callback_data=settings.CALLBACK_ONBOARDING_FOLLOWUP_NO)],
    ])
    text = ("–ü—Ä–∏–≤–µ—Ç! üëã –ù–∞ —Å–≤—è–∑–∏ –∫–æ–º–∞–Ω–¥–∞ ¬´–ú–∞—Ä—á–µ–ª–ª–∏—Å¬ª.\n\n"
            "–ó–∞–º–µ—Ç–∏–ª–∏, —á—Ç–æ —Ç—ã –Ω–µ –ø—Ä–æ—à–µ–ª(-–ª–∞) –æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç–µ–ª—å–Ω–æ–π —Å–º–µ–Ω—ã. "
            "–•–æ—Ç–µ–ª–∏ –±—ã —É—Ç–æ—á–Ω–∏—Ç—å —Ç–≤–æ–π —Å—Ç–∞—Ç—É—Å: —Ç–≤–æ–∏ –ø–ª–∞–Ω—ã –ø–æ —Ä–∞–±–æ—Ç–µ —É –Ω–∞—Å –µ—â–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã?")

    try:
        sent_message = await context.bot.send_message(candidate_id, text, reply_markup=keyboard)
        context.user_data[settings.ACTIVE_MESSAGE_ID_KEY] = sent_message.message_id
        context.user_data['candidate_id_for_noshow'] = candidate_id
    except Exception as e:
        logger.error(f"Failed to send onboarding no-show check to {candidate_id}: {e}")


async def start_onboarding_followup(update: Update,
                                    context: ContextTypes.DEFAULT_TYPE) -> OnboardingFollowupState | int:
    query = update.callback_query
    await safe_answer_callback_query(query)

    if query.data == settings.CALLBACK_ONBOARDING_FOLLOWUP_YES:
        await send_or_edit_message(update, context,
                                   "–û—Ç–ª–∏—á–Ω–æ! –†–∞–¥—ã, —á—Ç–æ —Ç—ã —Å –Ω–∞–º–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∑–∞–±—É–¥—å –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ —Å–≤–æ–µ–π –ø–µ—Ä–≤–æ–π —Å–º–µ–Ω—ã (—Å—Å—ã–ª–∫—É —Ç–µ–±–µ –¥–∞–≤–∞–ª –º–µ–Ω–µ–¥–∂–µ—Ä).")
        return ConversationHandler.END

    elif query.data == settings.CALLBACK_ONBOARDING_FOLLOWUP_NO:
        await send_or_edit_message(update, context,
                                   "–û—á–µ–Ω—å –∂–∞–ª—å —ç—Ç–æ —Å–ª—ã—à–∞—Ç—å. –ï—Å–ª–∏ –Ω–µ —Å–ª–æ–∂–Ω–æ, –Ω–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á—Ç–æ –ø–æ–≤–ª–∏—è–ª–æ –Ω–∞ —Ç–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ?")
        return OnboardingFollowupState.AWAITING_LEAVING_REASON

    return ConversationHandler.END


async def leaving_reason_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    reason = update.message.text
    user_id, user_name, _ = get_user_data_from_update(update)
    timestamp = get_now().strftime("%Y-%m-%d %H:%M:%S")

    restaurant_code = await database.get_candidate_restaurant(user_id)
    restaurant_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    if restaurant_code:
         restaurant_name = next((name for name, r_code in RESTAURANT_OPTIONS if r_code.endswith(restaurant_code)), restaurant_code)

    row_data = [timestamp, user_name, user_id, restaurant_name, reason]
    await add_to_sheets_queue(settings.CANDIDATE_NOSHOW_SHEET_NAME, row_data)

    manager_ids = []
    if restaurant_code:
        manager_ids = await database.get_managers_for_restaurant(restaurant_code)

    recipients = set(settings.ADMIN_IDS).union(set(manager_ids))
    notification_tasks = await database.get_all_pending_feedback_for_candidate(user_id)

    if notification_tasks and recipients:
        message = (f"‚ùóÔ∏èüó£Ô∏è <b>–ö–∞–Ω–¥–∏–¥–∞—Ç –ø–µ—Ä–µ–¥—É–º–∞–ª –≤—ã—Ö–æ–¥–∏—Ç—å –Ω–∞ —Å–º–µ–Ω—É</b>\n\n"
                   f"<b>–ö–∞–Ω–¥–∏–¥–∞—Ç:</b> {html.escape(user_name)}\n"
                   f"<b>–†–µ—Å—Ç–æ—Ä–∞–Ω:</b> {html.escape(restaurant_name)}\n\n"
                   f"<b>–ü—Ä–∏—á–∏–Ω–∞, —É–∫–∞–∑–∞–Ω–Ω–∞—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º:</b>\n<pre>{html.escape(reason)}</pre>\n\n"
                   f"<i>–ó–∞–¥–∞—á–∏ –ø–æ —ç—Ç–æ–º—É –∫–∞–Ω–¥–∏–¥–∞—Ç—É –∑–∞–∫—Ä—ã—Ç—ã.</i>")

        for task in notification_tasks:
            if task['manager_id'] in recipients:
                try:
                    await context.bot.send_message(
                        chat_id=task['manager_id'],
                        text=message,
                        reply_to_message_id=task['message_id'],
                        parse_mode=ParseMode.HTML,
                        allow_sending_without_reply=True
                    )
                except Exception as e:
                    logger.error(f"Failed to send leaving reason to manager/admin {task['manager_id']}: {e}")

    # –í–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ
    await database.remove_all_pending_feedback_for_candidate(user_id)
    # –°—Ç–∞—Ç—É—Å is_active –æ—Å—Ç–∞–µ—Ç—Å—è 0, —á—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–ª—è –æ—Ç–∫–∞–∑–∞–≤—à–µ–≥–æ—Å—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    logger.info(f"User {user_id} changed their mind. Reason recorded, pending feedback cleared. User data retained as inactive.")

    await send_or_edit_message(update, context,
                               "–°–ø–∞—Å–∏–±–æ –∑–∞ —á–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç. –≠—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ. –£–¥–∞—á–∏ –≤ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –ø–æ–∏—Å–∫–∞—Ö!")
    return ConversationHandler.END


onboarding_followup_conversation_handler = ConversationHandler(
    entry_points=[
        CallbackQueryHandler(start_onboarding_followup,
                             pattern=f"^{settings.CALLBACK_ONBOARDING_FOLLOWUP_YES}$|^{settings.CALLBACK_ONBOARDING_FOLLOWUP_NO}$")
    ],
    states={
        OnboardingFollowupState.AWAITING_LEAVING_REASON: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, leaving_reason_received)],
    },
    fallbacks=[CommandHandler('cancel', cancel)],
    name="onboarding_followup_conv",
    persistent=True,
    per_message=False
)


async def start_candidate_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> CandidateFeedbackState:
    query = update.callback_query
    await safe_answer_callback_query(query)
    context.user_data.clear()
    context.user_data[settings.ACTIVE_MESSAGE_ID_KEY] = query.message.message_id

    keyboard = build_inline_keyboard(CANDIDATE_FEEDBACK_RATING_OPTIONS, columns=5)
    text = "<b>–í–æ–ø—Ä–æ—Å 1/4:</b> –ö–∞–∫ –≤ —Ü–µ–ª–æ–º –ø—Ä–æ—à–ª–æ –∏–Ω—Ç–µ—Ä–≤—å—é? –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏ –æ—Ç 1 (–ø–ª–æ—Ö–æ) –¥–æ 5 (–æ—Ç–ª–∏—á–Ω–æ)."
    await send_or_edit_message(update, context, text, keyboard)
    return CandidateFeedbackState.AWAITING_IMPRESSION


async def impression_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> CandidateFeedbackState:
    query = update.callback_query
    await safe_answer_callback_query(query)
    context.user_data["impression_rating"] = query.data.split("_")[-1]
    context.user_data["candidate_name"] = update.effective_user.full_name
    context.user_data["candidate_id"] = update.effective_user.id

    keyboard = build_inline_keyboard(YES_NO_OPTIONS, columns=2)
    text = "<b>–í–æ–ø—Ä–æ—Å 2/4:</b> –†–∞—Å—Å–∫–∞–∑–∞–ª –ª–∏ —Ç–µ–±–µ –º–µ–Ω–µ–¥–∂–µ—Ä –æ–±–æ –≤—Å–µ—Ö —É—Å–ª–æ–≤–∏—è—Ö —Ä–∞–±–æ—Ç—ã (–≥—Ä–∞—Ñ–∏–∫, –∑–∞—Ä–ø–ª–∞—Ç–∞, –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏)?"
    await send_or_edit_message(update, context, text, keyboard)
    return CandidateFeedbackState.AWAITING_CONDITIONS_MET


async def conditions_met_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> CandidateFeedbackState:
    query = update.callback_query
    await safe_answer_callback_query(query)
    context.user_data["conditions_met"] = "–î–∞" if query.data == "yes" else "–ù–µ—Ç"

    keyboard = build_inline_keyboard(YES_NO_OPTIONS, columns=2)
    text = "<b>–í–æ–ø—Ä–æ—Å 3/4:</b> –ë—ã–ª–∏ –ª–∏ —Ç–µ–±–µ –ø–æ–Ω—è—Ç–Ω—ã —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—É –Ω–∞ —ç—Ç—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å?"
    await send_or_edit_message(update, context, text, keyboard)
    return CandidateFeedbackState.AWAITING_REQUIREMENTS_CLEAR


async def requirements_clear_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> CandidateFeedbackState:
    query = update.callback_query
    await safe_answer_callback_query(query)
    context.user_data["requirements_clear"] = "–î–∞" if query.data == "yes" else "–ù–µ—Ç"

    text = "<b>–í–æ–ø—Ä–æ—Å 4/4:</b> –ú–æ–∂–µ—Ç –±—ã—Ç—å, —É —Ç–µ–±—è –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –¥–ª—è –Ω–∞—Å? (–ï—Å–ª–∏ –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏ ¬´–Ω–µ—Ç¬ª)"
    await send_or_edit_message(update, context, text, None)
    return CandidateFeedbackState.AWAITING_ADDITIONAL_COMMENTS


async def additional_comments_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["additional_comments"] = update.message.text

    user_data = context.user_data
    candidate_id = user_data["candidate_id"]
    candidate_name = user_data["candidate_name"]
    timestamp = get_now().strftime("%Y-%m-%d %H:%M:%S")

    restaurant_code = await database.get_candidate_restaurant(candidate_id)

    impression_rating_str = user_data.get("impression_rating")
    conditions_met = user_data.get("conditions_met")
    requirements_clear = user_data.get("requirements_clear")
    additional_comments = user_data.get("additional_comments", '–ù–µ—Ç')

    row_data = [timestamp, candidate_name, candidate_id, impression_rating_str, conditions_met, requirements_clear,
                additional_comments]
    await add_to_sheets_queue(settings.CANDIDATE_FEEDBACK_SHEET_NAME, row_data)

    await database.log_survey_completion('candidate_feedback', candidate_id, restaurant_code)

    flags = []
    message_title = "üìù <b>–û–° –æ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –ø–æ—Å–ª–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è</b>"

    try:
        if impression_rating_str and int(impression_rating_str) < 3:
            flags.append(f"üö© <b>–ù–∏–∑–∫–∞—è –æ—Ü–µ–Ω–∫–∞ –∏–Ω—Ç–µ—Ä–≤—å—é: {impression_rating_str}/5</b>")
    except (ValueError, TypeError):
        pass

    if conditions_met == "–ù–µ—Ç":
        flags.append("‚ö†Ô∏è <b>–£—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã –±—ã–ª–∏ –Ω–µ –æ–∑–≤—É—á–µ–Ω—ã –∏–ª–∏ –Ω–µ –ø–æ–Ω—è—Ç–Ω—ã.</b>")
    if requirements_clear == "–ù–µ—Ç":
        flags.append("‚ö†Ô∏è <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—É –±—ã–ª–∏ –Ω–µ —è—Å–Ω—ã.</b>")

    if flags:
        message_title = "‚ùóÔ∏èüö© <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –û–° –æ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞!</b> üö©‚ùóÔ∏è"

    admin_message_parts = [message_title]
    admin_message_parts.append(f"\n<b>–ö–∞–Ω–¥–∏–¥–∞—Ç:</b> {html.escape(candidate_name)} (ID: <code>{candidate_id}</code>)")

    if flags:
        admin_message_parts.append("\n<b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–º–µ–Ω—Ç—ã:</b>")
        admin_message_parts.extend(flags)
        admin_message_parts.append("\n" + "=" * 20 + "\n")

    admin_message_parts.append("<b>–ü–æ–ª–Ω—ã–π –æ—Ç–∑—ã–≤:</b>")
    admin_message_parts.append(f"<b>–û—Ü–µ–Ω–∫–∞ –∏–Ω—Ç–µ—Ä–≤—å—é:</b> {impression_rating_str}/5")
    admin_message_parts.append(f"<b>–£—Å–ª–æ–≤–∏—è –æ–∑–≤—É—á–µ–Ω—ã:</b> {conditions_met}")
    admin_message_parts.append(f"<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ–Ω—è—Ç–Ω—ã:</b> {requirements_clear}")
    admin_message_parts.append(f"<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {html.escape(additional_comments)}")

    admin_message = "\n".join(admin_message_parts)

    admin_tasks = await database.get_all_pending_feedback_for_candidate(candidate_id)
    for task in admin_tasks:
        if task['manager_id'] in settings.ADMIN_IDS:
            try:
                await context.bot.send_message(
                    chat_id=task['manager_id'],
                    text=admin_message,
                    parse_mode=ParseMode.HTML,
                    reply_to_message_id=task['message_id'],
                    allow_sending_without_reply=True
                )
            except Exception as e:
                logger.error(f"Failed to send candidate feedback to admin {task['manager_id']}: {e}")

    await send_or_edit_message(update, context, "–°–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! –û–Ω–∞ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ. üôè")

    return ConversationHandler.END


candidate_feedback_conversation_handler = ConversationHandler(
    entry_points=[
        CallbackQueryHandler(start_candidate_feedback, pattern=f"^{settings.CALLBACK_START_CANDIDATE_FEEDBACK}$")],
    states={
        CandidateFeedbackState.AWAITING_IMPRESSION: [CallbackQueryHandler(impression_received, pattern="^cand_rate_"),
                                                     MessageHandler(filters.TEXT, prompt_to_use_button)],
        CandidateFeedbackState.AWAITING_CONDITIONS_MET: [
            CallbackQueryHandler(conditions_met_received, pattern="^(yes|no)$"),
            MessageHandler(filters.TEXT, prompt_to_use_button)],
        CandidateFeedbackState.AWAITING_REQUIREMENTS_CLEAR: [
            CallbackQueryHandler(requirements_clear_received, pattern="^(yes|no)$"),
            MessageHandler(filters.TEXT, prompt_to_use_button)],
        CandidateFeedbackState.AWAITING_ADDITIONAL_COMMENTS: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, additional_comments_received)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
    name="candidate_feedback_conv",
    persistent=True,
    per_message=False,
)