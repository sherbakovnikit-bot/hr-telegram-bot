import html
import logging
import re
import uuid
import asyncio

from telegram import Update, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
)
from telegram.constants import ParseMode
from telegram.error import BadRequest, Forbidden

from models import RecruitmentState
from core import settings, database, stickers
from utils.helpers import (
    get_user_data_from_update,
    safe_answer_callback_query,
    send_or_edit_message,
    send_transient_message,
    add_to_sheets_queue,
    add_user_to_interacted,
    get_now,
    format_user_for_sheets
)
from utils.keyboards import (
    RECRUITMENT_POSITION_OPTIONS,
    RESTAURANT_OPTIONS,
    YES_NO_OPTIONS,
    MARITAL_STATUS_OPTIONS,
    CHILDREN_OPTIONS,
    HEALTH_OPTIONS,
    ATTITUDE_TO_APPEARANCE_OPTIONS,
    EDUCATION_FORM_OPTIONS,
    COURSE_OPTIONS,
    EXPERIENCE_OPTIONS,
    INCOME_OPTIONS,
    JOBS_COUNT_OPTIONS,
    VACANCY_SOURCE_OPTIONS,
    build_inline_keyboard
)
from handlers.common import cancel, prompt_to_use_button
from handlers.feedback import schedule_candidate_feedback

logger = logging.getLogger(__name__)

TOTAL_QUESTIONS = 34
MIN_ANSWER_LENGTH = 10

WEEKLY_SHIFTS_OPTIONS = [
    ("1-2", "shifts_1_2"), ("2-3", "shifts_2_3"),
    ("3-4", "shifts_3_4"), ("4-5", "shifts_4_5"),
    ("5+", "shifts_5_plus")
]


def get_progress_bar(current_q: int, total_q: int) -> str:
    progress = int((current_q / total_q) * 10)
    filled = '‚ñà' * progress
    empty = '‚ñë' * (10 - progress)
    percent = int((current_q / total_q) * 100)
    return f"[{filled}{empty}] {percent}%"


def get_question_header(context: ContextTypes.DEFAULT_TYPE) -> str:
    current_q = context.user_data.setdefault('current_question_num', 1)
    progress_bar = get_progress_bar(current_q, TOTAL_QUESTIONS)
    return f"<b>–í–æ–ø—Ä–æ—Å {current_q}/{TOTAL_QUESTIONS}</b>\n<code>{progress_bar}</code>\n\n"


async def start_recruitment_flow(update: Update, context: ContextTypes.DEFAULT_TYPE) -> RecruitmentState:
    user = update.effective_user
    logger.info(f"User {user.id} starting RECRUITMENT flow with deeplink.")
    await add_user_to_interacted(user.id, context)
    context.user_data.clear()
    context.user_data['conversations'] = {'recruitment_conv': True} # –§–ª–∞–≥ –¥–ª—è /start

    if update.message:
        try:
            await update.message.delete()
        except (BadRequest, Forbidden):
            pass

    param = context.args[0] if context.args else ""
    if not param or not param.startswith("interview_"):
        await context.bot.send_message(
            update.effective_chat.id,
            "–û–π, –∫–∞–∂–µ—Ç—Å—è, –≤ —Å—Å—ã–ª–∫–µ –∏–ª–∏ QR-–∫–æ–¥–µ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É."
        )
        return ConversationHandler.END

    restaurant_code_suffix = param.replace("interview_", "")
    restaurant_code = f"res_{restaurant_code_suffix}"
    restaurant_name = next((name for name, code in RESTAURANT_OPTIONS if code == restaurant_code), None)

    if not restaurant_name:
        await context.bot.send_message(
            update.effective_chat.id,
            "–ù–µ —Å–º–æ–≥–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É –∑–∞ –ø–æ–º–æ—â—å—é."
        )
        return ConversationHandler.END

    context.user_data['preselected_restaurant_code'] = restaurant_code_suffix
    context.user_data['preselected_restaurant_name'] = restaurant_name
    context.user_data['chat_id'] = update.effective_chat.id
    context.user_data['current_question_num'] = 1

    await context.bot.send_sticker(chat_id=user.id, sticker=stickers.get_random_greeting())
    await asyncio.sleep(0.5)

    header = get_question_header(context)
    text = (
        "Ciao! üëã\n\n"
        f"–†–∞–¥—ã, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å—Ç–∞—Ç—å —á–∞—Å—Ç—å—é –∫–æ–º–∞–Ω–¥—ã ¬´–ú–∞—Ä—á–µ–ª–ª–∏—Å¬ª –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ –ø–æ –∞–¥—Ä–µ—Å—É: <b>{html.escape(restaurant_name)}</b>.\n\n"
        f"–ß—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –ø–æ–±–ª–∏–∂–µ, —è –∑–∞–¥–∞–º {TOTAL_QUESTIONS} –≤–æ–ø—Ä–æ—Å–æ–≤. –≠—Ç–æ –∑–∞–π–º–µ—Ç –æ–∫–æ–ª–æ 10-15 –º–∏–Ω—É—Ç.\n\n"
        "<i>–ü—Ä–æ–¥–æ–ª–∂–∞—è –¥–∏–∞–ª–æ–≥, —Ç—ã –¥–∞–µ—à—å —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–≤–æ–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ú—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –∏—Ö –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å.</i>\n\n"
        f"{header}"
        "–ù–∞—á–Ω—ë–º? –ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–∏ –§–∞–º–∏–ª–∏—é, –ò–º—è –∏ –û—Ç—á–µ—Å—Ç–≤–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é."
    )

    sent_message = await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=text,
        parse_mode=ParseMode.HTML,
        reply_markup=ReplyKeyboardRemove()
    )
    context.user_data[settings.ACTIVE_MESSAGE_ID_KEY] = sent_message.message_id

    return RecruitmentState.FULL_NAME


async def full_name_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> RecruitmentState:
    context.user_data.setdefault('current_question_num', 1)
    full_name = update.message.text.strip()
    if len(full_name.split()) < 2:
        await send_transient_message(context, update.effective_chat.id,
                                     "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–∞–∫ –º–∏–Ω–∏–º—É–º –§–∞–º–∏–ª–∏—é –∏ –ò–º—è.")
        return RecruitmentState.FULL_NAME

    context.user_data['full_name'] = full_name
    first_name = full_name.split()[1] if len(full_name.split()) > 1 else full_name.split()[0]
    context.user_data['first_name'] = first_name

    context.user_data['current_question_num'] += 1
    header = get_question_header(context)
    text = (f"–û—Ç–ª–∏—á–Ω–æ, {html.escape(first_name)}, –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! ‚ú®\n\n"
            f"{header}"
            '–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ø–æ–ª–Ω—ã—Ö –ª–µ—Ç?')

    await send_or_edit_message(update, context, text)

    return RecruitmentState.AGE


async def age_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int | RecruitmentState:
    context.user_data.setdefault('current_question_num', 2)
    age_text = update.message.text.strip()
    if not age_text.isdigit():
        await send_transient_message(context, update.effective_chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏.")
        await update.message.delete()
        return RecruitmentState.AGE

    age = int(age_text)

    if age < 16:
        await send_or_edit_message(update, context,
                                   "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –º–æ–∂–µ–º –ø—Ä–∏–Ω—è—Ç—å –Ω–∞ —Ä–∞–±–æ—Ç—É —Ç–æ–ª—å–∫–æ —Å 16 –ª–µ—Ç. –°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ–π –∏–Ω—Ç–µ—Ä–µ—Å, –±—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –≤ –±—É–¥—É—â–µ–º! üôè"
                                   )
        context.user_data.clear()
        return ConversationHandler.END

    if age > 100:
        await send_transient_message(context, update.effective_chat.id,
                                     "–í–≤–µ–¥–µ–Ω –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å –∏ –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        await update.message.delete()
        return RecruitmentState.AGE

    context.user_data['age'] = age_text
    context.user_data['current_question_num'] += 1
    header = get_question_header(context)
    text = f"–ü—Ä–∏–Ω—è—Ç–æ!\n\n{header}" \
           '–†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–≤–æ–µ–π —Å–µ–º—å–µ (—Å –∫–µ–º —Ç—ã –∂–∏–≤–µ—à—å, –∫—Ç–æ —Ç–≤–æ–∏ –±–ª–∏–∑–∫–∏–µ).'
    await send_or_edit_message(update, context, text)
    return RecruitmentState.FAMILY_INFO


async def family_info_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> RecruitmentState:
    context.user_data.setdefault('current_question_num', 3)
    answer = update.message.text.strip()
    if len(answer) < MIN_ANSWER_LENGTH:
        await send_transient_message(context, update.effective_chat.id,
                                     f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞–π –±–æ–ª–µ–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç (—Ö–æ—Ç—è –±—ã {MIN_ANSWER_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤).")
        return RecruitmentState.FAMILY_INFO

    context.user_data['family_info'] = answer
    context.user_data['current_question_num'] += 1
    header = get_question_header(context)
    keyboard = build_inline_keyboard(VACANCY_SOURCE_OPTIONS, columns=2)
    text = f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª—Å—è(–∞—Å—å)!\n\n{header}" \
           '–û—Ç–∫—É–¥–∞ —Ç—ã —É–∑–Ω–∞–ª(–∞) –æ –≤–∞–∫–∞–Ω—Å–∏–∏?'
    await send_or_edit_message(update, context, text, keyboard)
    return RecruitmentState.VACANCY_SOURCE


async def vacancy_source_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> RecruitmentState:
    context.user_data.setdefault('current_question_num', 4)
    query = update.callback_query
    await safe_answer_callback_query(query)
    source = next((name for name, data in VACANCY_SOURCE_OPTIONS if data == query.data), "–î—Ä—É–≥–æ–µ")
    context.user_data['vacancy_source'] = source
    context.user_data['current_question_num'] += 1
    header = get_question_header(context)
    context.user_data.setdefault('selected_vacancies', [])
    buttons = [InlineKeyboardButton(f"{'‚úÖ ' if code in context.user_data['selected_vacancies'] else ''}{name}",
                                    callback_data=code) for name, code in RECRUITMENT_POSITION_OPTIONS]
    keyboard_layout = [buttons[i:i + 2] for i in range(0, len(buttons), 2)]
    keyboard_layout.append([InlineKeyboardButton("‚úîÔ∏è –ì–æ—Ç–æ–≤–æ", callback_data="done_vacancies")])
    text = f"{header}–ö–∞–∫–∞—è –≤–∞–∫–∞–Ω—Å–∏—è —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ)"
    await send_or_edit_message(update, context, text, InlineKeyboardMarkup(keyboard_layout))
    return RecruitmentState.AWAIT_MULTI_VACANCY


async def multi_vacancy_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> RecruitmentState:
    context.user_data.setdefault('current_question_num', 5)
    query = update.callback_query
    await safe_answer_callback_query(query)
    action = query.data
    selected_vacancies = context.user_data.setdefault('selected_vacancies', [])

    if action == "done_vacancies":
        if not selected_vacancies:
            await query.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –≤–∞–∫–∞–Ω—Å–∏—é.", show_alert=True)
            return RecruitmentState.AWAIT_MULTI_VACANCY

        if 'vac_Other' in selected_vacancies:
            await send_or_edit_message(update, context,
                                       "–¢—ã –≤—ã–±—Ä–∞–ª(–∞) '–î—Ä—É–≥–æ–µ'. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏, –∫–∞–∫–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?")
            return RecruitmentState.AWAIT_OTHER_VACANCY

        context.user_data['applied_position'] = ", ".join(
            [next(name for name, code in RECRUITMENT_POSITION_OPTIONS if code == v_code) for v_code in
             selected_vacancies])
        context.user_data['current_question_num'] += 1
        header = get_question_header(context)
        text = f"–í—ã–±—Ä–∞–Ω–æ: <b>{html.escape(context.user_data['applied_position'])}</b>.\n\n{header}–ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —ç—Ç–∞ —Ä–∞–±–æ—Ç–∞/–≤–∞–∫–∞–Ω—Å–∏—è —Ç–µ–±—è –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç?"
        await send_or_edit_message(update, context, text)
        return RecruitmentState.REASON_FOR_CHOICE

    if action in selected_vacancies:
        selected_vacancies.remove(action)
    else:
        selected_vacancies.append(action)

    buttons = [InlineKeyboardButton(f"{'‚úÖ ' if code in selected_vacancies else ''}{name}", callback_data=code) for
               name, code in RECRUITMENT_POSITION_OPTIONS]
    keyboard_layout = [buttons[i:i + 2] for i in range(0, len(buttons), 2)]
    keyboard_layout.append([InlineKeyboardButton("‚úîÔ∏è –ì–æ—Ç–æ–≤–æ", callback_data="done_vacancies")])
    await query.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup(keyboard_layout))
    return RecruitmentState.AWAIT_MULTI_VACANCY


async def other_vacancy_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> RecruitmentState:
    other_position = update.message.text.strip()
    selected_vacancies = context.user_data.get('selected_vacancies', [])

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π
    final_positions = []
    for code in selected_vacancies:
        if code == 'vac_Other':
            final_positions.append(other_position)
        else:
            final_positions.append(next(name for name, c in RECRUITMENT_POSITION_OPTIONS if c == code))

    context.user_data['applied_position'] = ", ".join(final_positions)
    context.user_data['current_question_num'] += 1
    header = get_question_header(context)
    text = f"–í—ã–±—Ä–∞–Ω–æ: <b>{html.escape(context.user_data['applied_position'])}</b>.\n\n{header}–ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —ç—Ç–∞ —Ä–∞–±–æ—Ç–∞/–≤–∞–∫–∞–Ω—Å–∏—è —Ç–µ–±—è –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç?"
    await send_or_edit_message(update, context, text)
    return RecruitmentState.REASON_FOR_CHOICE


async def reason_for_choice_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> RecruitmentState:
    context.user_data.setdefault('current_question_num', 6)
    answer = update.message.text.strip()
    if len(answer) < MIN_ANSWER_LENGTH:
        await send_transient_message(context, update.effective_chat.id,
                                     f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞–π –±–æ–ª–µ–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç (—Ö–æ—Ç—è –±—ã {MIN_ANSWER_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤).")
        return RecruitmentState.REASON_FOR_CHOICE

    context.user_data['reason_for_choice'] = answer
    context.user_data['current_question_num'] += 1
    header = get_question_header(context)
    context.user_data.setdefault('preferred_restaurants', [])
    buttons = [
        InlineKeyboardButton(f"{'‚úÖ ' if code in context.user_data.get('preferred_restaurant_codes', []) else ''}{name}",
                             callback_data=code) for name, code in RESTAURANT_OPTIONS]
    keyboard_layout = [buttons[i:i + 2] for i in range(0, len(buttons), 2)]
    keyboard_layout.append([InlineKeyboardButton("‚úîÔ∏è –ì–æ—Ç–æ–≤–æ", callback_data="done_restaurants")])
    text = f"–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤—ã–±–æ—Ä! –°–ø–∞—Å–∏–±–æ.\n\n{header}" \
           '–í –∫–∞–∫–æ–º –∏–∑ –Ω–∞—à–∏—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ —Ç—ã —Ö–æ—Ç–µ–ª(–∞) –±—ã —Ä–∞–±–æ—Ç–∞—Ç—å? (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ)'
    await send_or_edit_message(update, context, text, InlineKeyboardMarkup(keyboard_layout))
    return RecruitmentState.AWAIT_MULTI_RESTAURANT


async def multi_restaurant_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> RecruitmentState:
    context.user_data.setdefault('current_question_num', 7)
    query = update.callback_query
    await safe_answer_callback_query(query)
    action = query.data
    selected_restaurants_codes = context.user_data.setdefault('preferred_restaurant_codes', [])

    if action == "done_restaurants":
        if not selected_restaurants_codes:
            await query.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–µ—Å—Ç–æ—Ä–∞–Ω.", show_alert=True)
            return RecruitmentState.AWAIT_MULTI_RESTAURANT

        context.user_data['preferred_restaurant'] = ", ".join(
            [next(name for name, code in RESTAURANT_OPTIONS if code == r_code) for r_code in
             selected_restaurants_codes])
        context.user_data['current_question_num'] += 1
        header = get_question_header(context)
        keyboard = build_inline_keyboard(YES_NO_OPTIONS, columns=2)
        text = f"{header}–¢—ã —É–∂–µ –∑–Ω–∞–∫–æ–º(–∞) —Å —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞–º–∏ ¬´–ú–∞—Ä—á–µ–ª–ª–∏—Å¬ª –∫–∞–∫ –≥–æ—Å—Ç—å?"
        await send_or_edit_message(update, context, text, keyboard)
        return RecruitmentState.KNOWS_MARCELLIS

    if action in selected_restaurants_codes:
        selected_restaurants_codes.remove(action)
    else:
        selected_restaurants_codes.append(action)

    buttons = [InlineKeyboardButton(f"{'‚úÖ ' if code in selected_restaurants_codes else ''}{name}", callback_data=code)
               for name, code in RESTAURANT_OPTIONS]
    keyboard_layout = [buttons[i:i + 2] for i in range(0, len(buttons), 2)]
    keyboard_layout.append([InlineKeyboardButton("‚úîÔ∏è –ì–æ—Ç–æ–≤–æ", callback_data="done_restaurants")])
    await query.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup(keyboard_layout))
    return RecruitmentState.AWAIT_MULTI_RESTAURANT


async def knows_marcellis_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> RecruitmentState:
    context.user_data.setdefault('current_question_num', 8)
    query = update.callback_query
    await safe_answer_callback_query(query)
    context.user_data['knows_marcellis'] = "–î–∞" if query.data == "yes" else "–ù–µ—Ç"
    context.user_data['current_question_num'] += 1
    header = get_question_header(context)
    keyboard = build_inline_keyboard(YES_NO_OPTIONS, columns=2)
    text = f"{header}üåô –ì–æ—Ç–æ–≤(–∞) –ª–∏ —Ç—ã –∫ –Ω–æ—á–Ω—ã–º —Å–º–µ–Ω–∞–º?"
    await send_or_edit_message(update, context, text, keyboard)
    return RecruitmentState.NIGHT_SHIFTS


async def night_shifts_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> RecruitmentState:
    context.user_data.setdefault('current_question_num', 9)
    query = update.callback_query
    await safe_answer_callback_query(query)
    context.user_data['night_shifts'] = "–î–∞" if query.data == "yes" else "–ù–µ—Ç"
    context.user_data['current_question_num'] += 1
    header = get_question_header(context)
    keyboard = build_inline_keyboard(WEEKLY_SHIFTS_OPTIONS, columns=3)
    text = f"{header}üóìÔ∏è –°–∫–æ–ª—å–∫–æ –ø–æ–ª–Ω—ã—Ö —Å–º–µ–Ω –≤ –Ω–µ–¥–µ–ª—é —Ç—ã –≥–æ—Ç–æ–≤(–∞) –Ω–∞–º —É–¥–µ–ª—è—Ç—å? (–µ—Å–ª–∏ –ø–æ–ª–Ω–∞—è —Å–º–µ–Ω–∞ = 12 —á–∞—Å–æ–≤)"
    await send_or_edit_message(update, context, text, keyboard)
    return RecruitmentState.WEEKLY_SHIFTS


async def weekly_shifts_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> RecruitmentState:
    context.user_data.setdefault('current_question_num', 10)
    query = update.callback_query
    await safe_answer_callback_query(query)
    answer = next((name for name, data in WEEKLY_SHIFTS_OPTIONS if data == query.data), "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    context.user_data['weekly_shifts'] = answer
    context.user_data['current_question_num'] += 1
    header = get_question_header(context)
    text = f"{header}üì± –û—Å—Ç–∞–≤—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π –º–æ–±–∏–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79991234567):"
    await send_or_edit_message(update, context, text)
    return RecruitmentState.MOBILE_PHONE


async def mobile_phone_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> RecruitmentState:
    context.user_data.setdefault('current_question_num', 11)
    phone_text = update.message.text.strip()
    cleaned_phone = re.sub(r'\D', '', phone_text)
    if len(cleaned_phone) == 11 and cleaned_phone.startswith(('7', '8')):
        cleaned_phone = cleaned_phone[1:]
    if len(cleaned_phone) != 10:
        await send_transient_message(context, update.effective_chat.id,
                                     "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π 10-–∑–Ω–∞—á–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +7 999 123-45-67).")
        await update.message.delete()
        return RecruitmentState.MOBILE_PHONE
    context.user_data['mobile_phone'] = f"+7{cleaned_phone}"
    context.user_data['current_question_num'] += 1
    header = get_question_header(context)
    text = f"–ó–∞–ø–∏—Å–∞–ª!\n\n{header}üåê –ï—Å—Ç—å —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö (VK, Instagram –∏ —Ç.–¥.)? –ï—Å–ª–∏ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ ¬´–Ω–µ—Ç¬ª."
    await send_or_edit_message(update, context, text)
    return RecruitmentState.SOCIAL_LINK


async def social_link_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> RecruitmentState:
    context.user_data.setdefault('current_question_num', 12)
    context.user_data['social_link'] = update.message.text.strip()
    context.user_data['current_question_num'] += 1
    header = get_question_header(context)
    text = f"–û–∫–µ–π!\n\n{header}üèôÔ∏è –í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —Ç—ã —Ä–æ–¥–∏–ª—Å—è(–∞—Å—å)?"
    await send_or_edit_message(update, context, text)
    return RecruitmentState.CITY


async def city_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> RecruitmentState:
    context.user_data.setdefault('current_question_num', 13)
    context.user_data['city'] = update.message.text.strip()
    context.user_data['current_question_num'] += 1
    header = get_question_header(context)
    text = f"–ü–æ–Ω—è—Ç–Ω–æ!\n\n{header}üè† –ê –≥–¥–µ —Ç—ã —Å–µ–π—á–∞—Å –∂–∏–≤–µ—à—å (–≥–æ—Ä–æ–¥, —Ä–∞–π–æ–Ω, –±–ª–∏–∂–∞–π—à–µ–µ –º–µ—Ç—Ä–æ)?"
    await send_or_edit_message(update, context, text)
    return RecruitmentState.ADDRESS


async def address_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> RecruitmentState:
    context.user_data.setdefault('current_question_num', 14)
    context.user_data['address'] = update.message.text.strip()
    context.user_data['current_question_num'] += 1
    header = get_question_header(context)
    keyboard = build_inline_keyboard(MARITAL_STATUS_OPTIONS, columns=2)
    text = f"–ü—Ä–∏–Ω—è—Ç–æ, –¥–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ.\n\n{header}–ö–∞–∫–æ–≤–æ —Ç–≤–æ–µ —Å–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ?"
    await send_or_edit_message(update, context, text, keyboard)
    return RecruitmentState.MARITAL_STATUS


async def marital_status_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> RecruitmentState:
    context.user_data.setdefault('current_question_num', 15)
    query = update.callback_query
    await safe_answer_callback_query(query)
    status = next((name for name, data in MARITAL_STATUS_OPTIONS if data == query.data), "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    context.user_data['marital_status'] = status
    context.user_data['current_question_num'] += 1
    header = get_question_header(context)
    keyboard = build_inline_keyboard(CHILDREN_OPTIONS, columns=4)
    text = f"{header}üë∂ –ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –¥–µ—Ç–∏?"
    await send_or_edit_message(update, context, text, keyboard)
    return RecruitmentState.CHILDREN


async def children_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> RecruitmentState:
    context.user_data.setdefault('current_question_num', 16)
    query = update.callback_query
    await safe_answer_callback_query(query)
    answer = next((text for text, data in CHILDREN_OPTIONS if data == query.data), "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    context.user_data['children'] = answer
    context.user_data['current_question_num'] += 1
    header = get_question_header(context)
    keyboard = build_inline_keyboard(HEALTH_OPTIONS, columns=2)
    text = f"{header}üí™ –ö–∞–∫ —Ç—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—à—å —É—Ä–æ–≤–µ–Ω—å —Å–≤–æ–µ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è?"
    await send_or_edit_message(update, context, text, keyboard)
    return RecruitmentState.HEALTH_ASSESSMENT


async def health_assessment_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> RecruitmentState:
    context.user_data.setdefault('current_question_num', 17)
    query = update.callback_query
    await safe_answer_callback_query(query)
    answer = next((text for text, data in HEALTH_OPTIONS if data == query.data), "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    context.user_data['health_assessment'] = answer
    context.user_data['current_question_num'] += 1
    header = get_question_header(context)
    keyboard = build_inline_keyboard(ATTITUDE_TO_APPEARANCE_OPTIONS, columns=1)
    text = f"{header}‚ú® –ö–∞–∫ —Ç—ã –æ—Ç–Ω–æ—Å–∏—à—å—Å—è –∫ —Å–≤–æ–µ–π –≤–Ω–µ—à–Ω–æ—Å—Ç–∏?"
    await send_or_edit_message(update, context, text, keyboard)
    return RecruitmentState.ATTITUDE_TO_APPEARANCE


async def attitude_to_appearance_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> RecruitmentState:
    context.user_data.setdefault('current_question_num', 18)
    query = update.callback_query
    await safe_answer_callback_query(query)
    attitude = next((name for name, data in ATTITUDE_TO_APPEARANCE_OPTIONS if data == query.data), "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    context.user_data['attitude_to_appearance'] = attitude
    context.user_data['current_question_num'] += 1
    header = get_question_header(context)
    text = f"{header}üéì –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–≤–æ–µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—á–µ–±–Ω–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è (–ø–æ–ª–Ω–æ—Å—Ç—å—é):"
    await send_or_edit_message(update, context, text)
    return RecruitmentState.EDUCATION_NAME


async def education_name_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> RecruitmentState:
    context.user_data.setdefault('current_question_num', 19)
    context.user_data['education_name'] = update.message.text.strip()
    context.user_data['current_question_num'] += 1
    header = get_question_header(context)
    text = f"–°—É–ø–µ—Ä!\n\n{header}üìÖ –ì–æ–¥ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è / –≥–æ–¥ –æ–∫–æ–Ω—á–∞–Ω–∏—è:"
    await send_or_edit_message(update, context, text)
    return RecruitmentState.GRADUATION_YEAR


async def graduation_year_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> RecruitmentState:
    context.user_data.setdefault('current_question_num', 20)
    context.user_data['graduation_year'] = update.message.text.strip()
    context.user_data['current_question_num'] += 1
    header = get_question_header(context)
    keyboard = build_inline_keyboard(COURSE_OPTIONS, columns=4)
    text = f"–ó–∞–ø–∏—Å–∞–ª.\n\n{header}üî¢ –ù–∞ –∫–∞–∫–æ–º –∫—É—Ä—Å–µ —É—á–∏—à—å—Å—è —Å–µ–π—á–∞—Å?"
    await send_or_edit_message(update, context, text, keyboard)
    return RecruitmentState.COURSE


async def course_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> RecruitmentState:
    context.user_data.setdefault('current_question_num', 21)
    query = update.callback_query
    await safe_answer_callback_query(query)
    course = next((name for name, data in COURSE_OPTIONS if data == query.data), "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    context.user_data['course'] = course
    context.user_data['current_question_num'] += 1
    header = get_question_header(context)
    keyboard = build_inline_keyboard(EDUCATION_FORM_OPTIONS, columns=2)
    text = f"–ü—Ä–∏–Ω—è—Ç–æ.\n\n{header}üèõÔ∏è –§–æ—Ä–º–∞ –æ–±—É—á–µ–Ω–∏—è:"
    await send_or_edit_message(update, context, text, keyboard)
    return RecruitmentState.EDUCATION_FORM


async def education_form_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> RecruitmentState:
    context.user_data.setdefault('current_question_num', 22)
    query = update.callback_query
    await safe_answer_callback_query(query)
    form = next((name for name, data in EDUCATION_FORM_OPTIONS if data == query.data), "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    context.user_data['education_form'] = form
    context.user_data['current_question_num'] += 1
    header = get_question_header(context)
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–î–∞, –Ω–∞–ø–∏—à—É", callback_data="courses_yes")],
        [InlineKeyboardButton("–ù–µ—Ç", callback_data="courses_no")]
    ])
    text = f"{header}üìö –ü—Ä–æ—Ö–æ–¥–∏–ª(–∞) –ª–∏ —Ç—ã –∫–∞–∫–∏–µ-–ª–∏–±–æ –∫—É—Ä—Å—ã, —Ç—Ä–µ–Ω–∏–Ω–≥–∏, —Å–µ–º–∏–Ω–∞—Ä—ã?"
    await send_or_edit_message(update, context, text, keyboard)
    return RecruitmentState.AWAIT_ADDITIONAL_COURSES_DECISION


async def additional_courses_decision_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> RecruitmentState:
    context.user_data.setdefault('current_question_num', 23)
    query = update.callback_query
    await safe_answer_callback_query(query)

    if query.data == "courses_yes":
        await send_or_edit_message(update, context, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—á–∏—Å–ª–∏ –∏—Ö:")
        return RecruitmentState.ADDITIONAL_COURSES
    else:
        context.user_data['additional_courses'] = "–ù–µ—Ç"
        context.user_data['current_question_num'] += 1
        header = get_question_header(context)
        keyboard = build_inline_keyboard(EXPERIENCE_OPTIONS, columns=2)
        text = f"–ü—Ä–∏–Ω—è—Ç–æ!\n\n{header}üë∑‚Äç‚ôÇÔ∏è –ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –Ω–∞ —Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –ø—Ä–µ—Ç–µ–Ω–¥—É–µ—à—å?"
        await send_or_edit_message(update, context, text, keyboard)
        return RecruitmentState.EXPERIENCE_DURATION


async def additional_courses_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> RecruitmentState:
    context.user_data.setdefault('current_question_num', 23)
    context.user_data['additional_courses'] = update.message.text.strip()
    context.user_data['current_question_num'] += 1
    header = get_question_header(context)
    keyboard = build_inline_keyboard(EXPERIENCE_OPTIONS, columns=2)
    text = f"–ü—Ä–∏–Ω—è—Ç–æ!\n\n{header}üë∑‚Äç‚ôÇÔ∏è –ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –Ω–∞ —Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –ø—Ä–µ—Ç–µ–Ω–¥—É–µ—à—å?"
    await send_or_edit_message(update, context, text, keyboard)
    return RecruitmentState.EXPERIENCE_DURATION


async def experience_duration_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> RecruitmentState:
    context.user_data.setdefault('current_question_num', 24)
    query = update.callback_query
    await safe_answer_callback_query(query)
    answer = next((text for text, data in EXPERIENCE_OPTIONS if data == query.data), "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    context.user_data['experience_duration'] = answer
    context.user_data['current_question_num'] += 1

    if query.data == "exp_0":
        context.user_data['experience_details'] = "–ù–µ—Ç"
        context.user_data['current_question_num'] += 1
        header = get_question_header(context)
        keyboard = build_inline_keyboard(INCOME_OPTIONS, columns=2)
        text = f"{header}üí∞ –ù–∞ –∫–∞–∫–æ–π –¥–æ—Ö–æ–¥ –≤ –º–µ—Å—è—Ü —Ç—ã —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—à—å?"
        await send_or_edit_message(update, context, text, keyboard)
        return RecruitmentState.EXPECTED_INCOME
    else:
        header = get_question_header(context)
        text = f"{header}üè¢ –û–ø–∏—à–∏ —Å–≤–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–ø—ã—Ç: –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏, –¥–∞—Ç—ã —Ä–∞–±–æ—Ç—ã, –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏."
        await send_or_edit_message(update, context, text)
        return RecruitmentState.AWAIT_EXPERIENCE_DETAILS


async def experience_details_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> RecruitmentState:
    context.user_data.setdefault('current_question_num', 25)
    context.user_data['experience_details'] = update.message.text.strip()
    context.user_data['current_question_num'] += 1
    header = get_question_header(context)
    keyboard = build_inline_keyboard(INCOME_OPTIONS, columns=2)
    text = f"–ü–æ–¥—Ä–æ–±–Ω–æ! –°–ø–∞—Å–∏–±–æ.\n\n{header}üí∞ –ù–∞ –∫–∞–∫–æ–π –¥–æ—Ö–æ–¥ –≤ –º–µ—Å—è—Ü —Ç—ã —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—à—å?"
    await send_or_edit_message(update, context, text, keyboard)
    return RecruitmentState.EXPECTED_INCOME


async def expected_income_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> RecruitmentState:
    context.user_data.setdefault('current_question_num', 26)
    query = update.callback_query
    await safe_answer_callback_query(query)
    answer = next((text for text, data in INCOME_OPTIONS if data == query.data), "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    context.user_data['expected_income'] = answer
    context.user_data['current_question_num'] += 1
    header = get_question_header(context)
    text = f"{header}üö∂‚Äç‚ôÇÔ∏è –ö–∞–∫–æ–≤–∞ –±—ã–ª–∞ –Ω–∞—Å—Ç–æ—è—â–∞—è –ø—Ä–∏—á–∏–Ω–∞ —É—Ö–æ–¥–∞ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–µ—Å—Ç–∞ —Ä–∞–±–æ—Ç—ã?"
    await send_or_edit_message(update, context, text)
    return RecruitmentState.REASON_FOR_LEAVING


async def reason_for_leaving_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> RecruitmentState:
    context.user_data.setdefault('current_question_num', 27)
    answer = update.message.text.strip()
    if len(answer) < MIN_ANSWER_LENGTH:
        await send_transient_message(context, update.effective_chat.id,
                                     f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞–π –±–æ–ª–µ–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç (—Ö–æ—Ç—è –±—ã {MIN_ANSWER_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤).")
        return RecruitmentState.REASON_FOR_LEAVING
    context.user_data['reason_for_leaving'] = answer
    context.user_data['current_question_num'] += 1
    header = get_question_header(context)
    keyboard = build_inline_keyboard(JOBS_COUNT_OPTIONS, columns=3)
    text = f"–°–ø–∞—Å–∏–±–æ –∑–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç—å.\n\n{header}üè¢ –£–∫–∞–∂–∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–ø–∞–Ω–∏–π, –≥–¥–µ —Ç—ã –∫–æ–≥–¥–∞-–ª–∏–±–æ —Ä–∞–±–æ—Ç–∞–ª(–∞):"
    await send_or_edit_message(update, context, text, keyboard)
    return RecruitmentState.PREVIOUS_JOBS_COUNT


async def previous_jobs_count_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> RecruitmentState:
    context.user_data.setdefault('current_question_num', 28)
    query = update.callback_query
    await safe_answer_callback_query(query)
    answer = next((text for text, data in JOBS_COUNT_OPTIONS if data == query.data), "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    context.user_data['previous_jobs_count'] = answer
    context.user_data['current_question_num'] += 1
    header = get_question_header(context)
    text = f"–û—Ç–ª–∏—á–Ω–æ! –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º –Ω–µ–º–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ —Ç–µ–±–µ –∫–∞–∫ –æ –ª–∏—á–Ω–æ—Å—Ç–∏.\n\n{header}ü§∏‚Äç‚ôÇÔ∏è –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–µ–º –æ—Ç–Ω–æ—à–µ–Ω–∏–∏ –∫ —Å–ø–æ—Ä—Ç—É (–∑–∞–Ω–∏–º–∞–µ—à—å—Å—è –ª–∏, —á–µ–º —É–≤–ª–µ–∫–∞–µ—à—å—Å—è):"
    await send_or_edit_message(update, context, text)
    return RecruitmentState.ATTITUDE_TO_SPORT


async def attitude_to_sport_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> RecruitmentState:
    context.user_data.setdefault('current_question_num', 29)
    context.user_data['attitude_to_sport'] = update.message.text.strip()
    context.user_data['current_question_num'] += 1
    header = get_question_header(context)
    text = f"–ó–¥–æ—Ä–æ–≤–æ!\n\n{header}‚ú® –ü–µ—Ä–µ—á–∏—Å–ª–∏ —Ç—Ä–∏ —Å–∞–º—ã—Ö —Ü–µ–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–±—è –∫–∞—á–µ—Å—Ç–≤–∞ –≤ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ."
    await send_or_edit_message(update, context, text)
    return RecruitmentState.LIFE_VALUES


async def life_values_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> RecruitmentState:
    context.user_data.setdefault('current_question_num', 30)
    context.user_data['life_values'] = update.message.text.strip()
    context.user_data['current_question_num'] += 1
    header = get_question_header(context)
    text = f"–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–∑–≥–ª—è–¥!\n\n{header}ü™® –ù–∞–∑–æ–≤–∏ —Å–≤–æ–∏ –≥–ª–∞–≤–Ω—ã–µ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞ –∫–∞–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞."
    await send_or_edit_message(update, context, text)
    return RecruitmentState.LIFE_WEAKNESSES


async def life_weaknesses_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> RecruitmentState:
    context.user_data.setdefault('current_question_num', 31)
    context.user_data['life_weaknesses'] = update.message.text.strip()
    context.user_data['current_question_num'] += 1
    header = get_question_header(context)
    text = f"–°–ø–∞—Å–∏–±–æ!\n\n{header}üéØ –í –∫–∞–∫–æ–π —Å—Ñ–µ—Ä–µ —Ç—ã —Ö–æ—Ç–µ–ª(–∞) –±—ã —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ –∂–∏–∑–Ω–∏?"
    await send_or_edit_message(update, context, text)
    return RecruitmentState.LIFE_GOAL


async def life_goal_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> RecruitmentState:
    context.user_data.setdefault('current_question_num', 32)
    context.user_data['life_goal'] = update.message.text.strip()
    context.user_data['current_question_num'] += 1
    header = get_question_header(context)
    text = f"–•–æ—Ä–æ—à–∞—è —Ü–µ–ª—å!\n\n{header}üìñ –ö–∞–∫—É—é –∫–Ω–∏–≥—É —Ç—ã —Å–µ–π—á–∞—Å —á–∏—Ç–∞–µ—à—å –∏–ª–∏ –∫–∞–∫–æ–π –∫—É—Ä—Å –ø—Ä–æ—Ö–æ–¥–∏—à—å?"
    await send_or_edit_message(update, context, text)
    return RecruitmentState.READING_NOW


async def reading_now_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> RecruitmentState:
    context.user_data.setdefault('current_question_num', 33)
    context.user_data['reading_now'] = update.message.text.strip()
    context.user_data['current_question_num'] += 1
    header = get_question_header(context)
    keyboard = build_inline_keyboard(YES_NO_OPTIONS, columns=2)
    text = f"–ò –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å, —Ñ–∏–Ω–∏—à–Ω–∞—è –ø—Ä—è–º–∞—è!\n\n{header}‚öñÔ∏è –ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è —Å—É–¥–∏–º–æ—Å—Ç—å?"
    await send_or_edit_message(update, context, text, keyboard)
    return RecruitmentState.JUDGED_BEFORE


async def judged_before_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data.setdefault('current_question_num', 34)
    query = update.callback_query
    await safe_answer_callback_query(query)
    context.user_data['judged_before'] = "–î–∞" if query.data == "yes" else "–ù–µ—Ç"
    await send_or_edit_message(update, context,
                               "–û—Ç–ª–∏—á–Ω–æ! –≠—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å. üöÄ\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ —É–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è! –ú—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É...")
    await send_recruitment_results(context)

    first_name = context.user_data.get('first_name', '–∫–∞–Ω–¥–∏–¥–∞—Ç')
    final_text = f"–°–ø–∞—Å–∏–±–æ, {html.escape(first_name)}! –¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å —Ç–æ–±–æ–π. –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!"
    await send_or_edit_message(update, context, final_text, None)

    context.user_data.clear()
    return ConversationHandler.END


async def send_recruitment_results(context: ContextTypes.DEFAULT_TYPE):
    user_data = context.user_data
    chat_id = user_data.get('chat_id')
    user_full_name = user_data.get('full_name', f'–ö–∞–Ω–¥–∏–¥–∞—Ç_{chat_id}')
    user = await context.bot.get_chat(chat_id)

    timestamp = get_now().strftime("%Y-%m-%d %H:%M:%S")
    interview_restaurant_code_suffix = user_data.get("preselected_restaurant_code")

    report_fields_for_sheets = [
        "preselected_restaurant_name", "full_name", "age", "family_info", "vacancy_source",
        "applied_position", "reason_for_choice", "preferred_restaurant", "knows_marcellis",
        "night_shifts", "weekly_shifts", "mobile_phone", "social_link", "city", "address", "marital_status",
        "children", "health_assessment", "attitude_to_appearance", "education_name",
        "graduation_year", "course", "education_form", "additional_courses",
        "experience_duration", "experience_details", "expected_income", "reason_for_leaving",
        "previous_jobs_count", "attitude_to_sport", "life_values", "life_weaknesses",
        "life_goal", "reading_now", "judged_before"
    ]

    user_link = format_user_for_sheets(chat_id, user_full_name, user.username)
    row_data = [timestamp, user_link]

    for key in report_fields_for_sheets:
        row_data.append(user_data.get(key, "N/A"))

    await add_to_sheets_queue(settings.INTERVIEW_SHEET_NAME, row_data)
    await database.log_survey_completion('recruitment', chat_id, interview_restaurant_code_suffix)
    await database.log_candidate_restaurant(chat_id, interview_restaurant_code_suffix)

    def clean_text(key, default="‚Äî"):
        text = str(user_data.get(key, default))
        text = text.replace('üíç ', '').replace('‚ù§Ô∏è ', '').replace('üö∂ ', '').replace('üíî ', '')
        text = text.replace('üòç ', '').replace('üôÇ ', '').replace('üòï ', '')
        text = text.replace('‚òÄÔ∏è ', '').replace('üåô ', '').replace('‚úâÔ∏è ', '').replace('üíª ', '')
        return html.escape(text)

    full_report_parts = [
        f"<b>–ö–∞–Ω–¥–∏–¥–∞—Ç:</b> <code>{clean_text('full_name')}</code>, {clean_text('age')} –ª–µ—Ç",
        f"<b>–í–∞–∫–∞–Ω—Å–∏—è:</b> {clean_text('applied_position')}",
        f"<b>–†–µ—Å—Ç–æ—Ä–∞–Ω:</b> {clean_text('preselected_restaurant_name')}",
        f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>{clean_text('mobile_phone')}</code>",
        f"<b>–°–æ—Ü. —Å–µ—Ç—å:</b> <code>{clean_text('social_link')}</code>",
        "",
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ",
        "<b>–ö–õ–Æ–ß–ï–í–´–ï –î–ê–ù–ù–´–ï</b>",
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ",
        f"<b>–û–∂–∏–¥–∞–Ω–∏—è –ø–æ –¥–æ—Ö–æ–¥—É:</b> {clean_text('expected_income')}",
        f"<b>–û–ø—ã—Ç:</b> {clean_text('experience_duration')}",
        f"<b>–ü—Ä–µ–¥—ã–¥—É—â–∏–µ –º–µ—Å—Ç–∞ —Ä–∞–±–æ—Ç—ã:</b> {clean_text('previous_jobs_count')}",
        f"<b>–ù–æ—á–Ω—ã–µ —Å–º–µ–Ω—ã:</b> {clean_text('night_shifts')}",
        f"<b>–°–º–µ–Ω –≤ –Ω–µ–¥–µ–ª—é:</b> {clean_text('weekly_shifts')}",
        f"<b>–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –±—Ä–µ–Ω–¥–æ–º:</b> {clean_text('knows_marcellis')}",
        f"<b>–°—É–¥–∏–º–æ—Å—Ç—å:</b> {clean_text('judged_before')}",
        f"<b>–°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è:</b> {clean_text('health_assessment')}",
        f"<b>–î–µ—Ç–∏:</b> {clean_text('children')}",
        "",
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ",
        "<b>–†–ê–ó–í–ï–†–ù–£–¢–´–ï –û–¢–í–ï–¢–´</b>",
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ",
        "",
        "ü§î <b>–ú–æ—Ç–∏–≤–∞—Ü–∏—è –∏ —Ü–µ–ª–∏</b>",
        f"<i>{clean_text('reason_for_choice')}</i>",
        "",
        "üö∂‚Äç‚ôÇÔ∏è <b>–ü—Ä–∏—á–∏–Ω–∞ —É—Ö–æ–¥–∞ —Å –ø—Ä–æ—à–ª–æ–≥–æ –º–µ—Å—Ç–∞</b>",
        f"<i>{clean_text('reason_for_leaving')}</i>",
        "",
        "üìã <b>–î–µ—Ç–∞–ª–∏ –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã</b>",
        f"<i>{clean_text('experience_details')}</i>",
        "",
        "üí™ <b>–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∏ —Ü–µ–Ω–Ω–æ—Å—Ç–∏</b>",
        f"<i>–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã: {clean_text('life_weaknesses')}\n–ö–∞—á–µ—Å—Ç–≤–∞ –≤ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ: {clean_text('life_values')}</i>",
        "",
        "üéì <b>–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ</b>",
        f"<i>–£—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ: {clean_text('education_name')} ({clean_text('education_form')})\n–ì–æ–¥—ã/–ö—É—Ä—Å: {clean_text('graduation_year')} / {clean_text('course')}\n–î–æ–ø. –∫—É—Ä—Å—ã: {clean_text('additional_courses')}</i>",
        "",
        "üë§ <b>–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>",
        f"<i>–ü—Ä–æ–∂–∏–≤–∞–Ω–∏–µ: {clean_text('address')}\n–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ: {clean_text('marital_status')}\n–°–µ–º—å—è: {clean_text('family_info')}\n–°–ø–æ—Ä—Ç: {clean_text('attitude_to_sport')}\n–ö–Ω–∏–≥–∏/–ö—É—Ä—Å—ã: {clean_text('reading_now')}\n–í–Ω–µ—à–Ω–æ—Å—Ç—å: {clean_text('attitude_to_appearance')}</i>",
    ]
    full_report_text = "\n".join(full_report_parts)

    summary_text = (
        f"‚ö°Ô∏è –ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞!\n\n"
        f"–ö–∞–Ω–¥–∏–¥–∞—Ç: <b>{clean_text('full_name')}</b> ({clean_text('age')})\n"
        f"–ü–æ–∑–∏—Ü–∏—è: <b>{clean_text('applied_position')}</b>\n"
        f"–†–µ—Å—Ç–æ—Ä–∞–Ω: <b>{clean_text('preselected_restaurant_name')}</b>\n\n"
        f"üíµ {clean_text('expected_income')}\n"
        f"üïí –û–ø—ã—Ç: {clean_text('experience_duration')}\n"
        f"üåô –ù–æ—á–∏: {clean_text('night_shifts')}"
    )

    recipients = set(settings.ADMIN_IDS)
    if interview_restaurant_code_suffix:
        manager_ids = await database.get_managers_for_restaurant(interview_restaurant_code_suffix)
        recipients.update(manager_ids)

    job_context_for_managers = {
        "candidate_id": chat_id,
        "candidate_name": user_data.get('full_name', '–ö–∞–Ω–¥–∏–¥–∞—Ç'),
        "position": user_data.get('applied_position', '‚Äî'),
        "full_name": user_data.get('full_name', '‚Äî'),
        "address": user_data.get('address', '‚Äî'),
        "phone": user_data.get('mobile_phone', '‚Äî'),
        "interview_restaurant_code": interview_restaurant_code_suffix,
        "interview_restaurant_name": user_data.get('preselected_restaurant_name', '–ù–µ —É–∫–∞–∑–∞–Ω'),
        "preferred_restaurant_codes": user_data.get('preferred_restaurant_codes', []),
        "recruitment_report": full_report_text
    }

    # --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ –ë–î –∫–∞–∫ –ù–ï–ê–ö–¢–ò–í–ù–û–ì–û ---
    # –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: –í–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –≤ core/database.py
    # –û–Ω–∞ –¥–æ–ª–∂–Ω–∞ –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É employees —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º is_active = 0
    await database.register_candidate(
        user_id=chat_id,
        full_name=user_full_name,
        restaurant_code=interview_restaurant_code_suffix
    )
    logger.info(f"Candidate {chat_id} registered in the system as inactive.")

    for recipient_id in recipients:
        try:
            feedback_id = str(uuid.uuid4())
            keyboard = InlineKeyboardMarkup([[
                InlineKeyboardButton("üìÑ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª–Ω—É—é –∞–Ω–∫–µ—Ç—É", callback_data=f"show_full_report_{feedback_id}")
            ]])

            sent_message = await context.bot.send_message(recipient_id, summary_text, parse_mode=ParseMode.HTML,
                                                          reply_markup=keyboard)

            await database.add_pending_feedback(
                feedback_id=feedback_id,
                manager_id=recipient_id,
                message_id=sent_message.message_id,
                candidate_id=chat_id,
                candidate_name=user_data.get('full_name', '–ö–∞–Ω–¥–∏–¥–∞—Ç'),
                job_data=job_context_for_managers,
                created_at=get_now().timestamp()
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∫–µ—Ç—ã –∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è {recipient_id}: {e}")

    if context.job_queue:
        job_context_for_candidate = {"candidate_id": chat_id}
        context.job_queue.run_once(schedule_candidate_feedback, when=settings.FEEDBACK_DELAY_SECONDS,
                                   data=job_context_for_candidate, name=f"cand_feedback_{chat_id}")

        logger.info(f"Scheduled candidate feedback for candidate {chat_id}")


async def show_full_recruitment_report(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await safe_answer_callback_query(query)
    feedback_id = query.data.replace("show_full_report_", "")

    # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö
    feedback_task = await database.get_pending_feedback_by_id(feedback_id)
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –∏—â–µ–º –≤ –∏—Å—Ç–æ—Ä–∏–∏
    if not feedback_task:
        feedback_task = await database.get_feedback_from_history(feedback_id)

    if not feedback_task:
        await query.edit_message_text(
            f"{query.message.text}\n\n<i>(–ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö –∏–ª–∏ –∏—Å—Ç–æ—Ä–∏–∏.)</i>",
            parse_mode=ParseMode.HTML,
            reply_markup=None
        )
        return

    full_report = feedback_task.get("job_data", {}).get("recruitment_report", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª–Ω—É—é –∞–Ω–∫–µ—Ç—É.")

    try:
        await query.edit_message_text(
            text=full_report,
            parse_mode=ParseMode.HTML,
            reply_markup=None
        )
    except BadRequest as e:
        if "Message is not modified" not in str(e):
            logger.error(f"Error editing message to full report: {e}")
            await query.message.reply_text(text=full_report, parse_mode=ParseMode.HTML)


async def send_candidate_check_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await safe_answer_callback_query(query)
    candidate_id = int(query.data.replace("check_candidate_", ""))
    check_data = context.bot_data.get('candidate_check_info', {}).get(candidate_id)

    if not check_data:
        await query.edit_message_text("–î–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∏ —É—Å—Ç–∞—Ä–µ–ª–∏).")
        return

    check_message_parts = [
        f"<b>1.</b> {html.escape(check_data['position'])}",
        f"<b>2.</b> <code>{html.escape(check_data['full_name'])}</code>",
        "<b>3. –í –ø—Ä–æ–µ–∫—Ç–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–ª</b>",
        f"<b>4.</b> {html.escape(check_data['address'])}",
        f"<b>5.</b> <code>{html.escape(check_data['phone'])}</code>",
    ]
    check_message = "\n".join(check_message_parts)
    await query.message.reply_text(text=check_message, parse_mode=ParseMode.HTML)
    await query.edit_message_reply_markup(reply_markup=None)


recruitment_conversation_handler = ConversationHandler(
    entry_points=[CommandHandler("start", start_recruitment_flow, filters=filters.Regex(r'interview_'))],
    states={
        RecruitmentState.FULL_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, full_name_received)],
        RecruitmentState.AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, age_received)],
        RecruitmentState.FAMILY_INFO: [MessageHandler(filters.TEXT & ~filters.COMMAND, family_info_received)],
        RecruitmentState.VACANCY_SOURCE: [CallbackQueryHandler(vacancy_source_received, pattern="^src_"),
                                          MessageHandler(filters.TEXT & ~filters.COMMAND, prompt_to_use_button)],
        RecruitmentState.AWAIT_MULTI_VACANCY: [
            CallbackQueryHandler(multi_vacancy_handler, pattern="^vac_|done_vacancies$"),
            MessageHandler(filters.TEXT & ~filters.COMMAND, prompt_to_use_button)],
        RecruitmentState.AWAIT_OTHER_VACANCY: [MessageHandler(filters.TEXT & ~filters.COMMAND, other_vacancy_received)],
        RecruitmentState.REASON_FOR_CHOICE: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, reason_for_choice_received)],
        RecruitmentState.AWAIT_MULTI_RESTAURANT: [
            CallbackQueryHandler(multi_restaurant_handler, pattern="^res_|done_restaurants$"),
            MessageHandler(filters.TEXT & ~filters.COMMAND, prompt_to_use_button)],
        RecruitmentState.KNOWS_MARCELLIS: [CallbackQueryHandler(knows_marcellis_received, pattern="^(yes|no)$"),
                                           MessageHandler(filters.TEXT & ~filters.COMMAND, prompt_to_use_button)],
        RecruitmentState.NIGHT_SHIFTS: [CallbackQueryHandler(night_shifts_received, pattern="^(yes|no)$"),
                                        MessageHandler(filters.TEXT & ~filters.COMMAND, prompt_to_use_button)],
        RecruitmentState.WEEKLY_SHIFTS: [CallbackQueryHandler(weekly_shifts_received, pattern="^shifts_"),
                                         MessageHandler(filters.TEXT & ~filters.COMMAND, prompt_to_use_button)],
        RecruitmentState.MOBILE_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, mobile_phone_received)],
        RecruitmentState.SOCIAL_LINK: [MessageHandler(filters.TEXT & ~filters.COMMAND, social_link_received)],
        RecruitmentState.CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, city_received)],
        RecruitmentState.ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, address_received)],
        RecruitmentState.MARITAL_STATUS: [CallbackQueryHandler(marital_status_received, pattern="^m_"),
                                          MessageHandler(filters.TEXT & ~filters.COMMAND, prompt_to_use_button)],
        RecruitmentState.CHILDREN: [CallbackQueryHandler(children_received, pattern="^child_"),
                                    MessageHandler(filters.TEXT & ~filters.COMMAND, prompt_to_use_button)],
        RecruitmentState.HEALTH_ASSESSMENT: [CallbackQueryHandler(health_assessment_received, pattern="^health_"),
                                             MessageHandler(filters.TEXT & ~filters.COMMAND, prompt_to_use_button)],
        RecruitmentState.ATTITUDE_TO_APPEARANCE: [
            CallbackQueryHandler(attitude_to_appearance_received, pattern="^app_"),
            MessageHandler(filters.TEXT & ~filters.COMMAND, prompt_to_use_button)],
        RecruitmentState.EDUCATION_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, education_name_received)],
        RecruitmentState.GRADUATION_YEAR: [MessageHandler(filters.TEXT & ~filters.COMMAND, graduation_year_received)],
        RecruitmentState.COURSE: [CallbackQueryHandler(course_received, pattern="^course_"),
                                  MessageHandler(filters.TEXT & ~filters.COMMAND, prompt_to_use_button)],
        RecruitmentState.EDUCATION_FORM: [CallbackQueryHandler(education_form_received, pattern="^form_"),
                                          MessageHandler(filters.TEXT & ~filters.COMMAND, prompt_to_use_button)],
        RecruitmentState.AWAIT_ADDITIONAL_COURSES_DECISION: [
            CallbackQueryHandler(additional_courses_decision_received, pattern="^courses_"),
            MessageHandler(filters.TEXT & ~filters.COMMAND, prompt_to_use_button)],
        RecruitmentState.ADDITIONAL_COURSES: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, additional_courses_received)],
        RecruitmentState.EXPERIENCE_DURATION: [CallbackQueryHandler(experience_duration_received, pattern="^exp_"),
                                               MessageHandler(filters.TEXT & ~filters.COMMAND, prompt_to_use_button)],
        RecruitmentState.AWAIT_EXPERIENCE_DETAILS: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, experience_details_received)],
        RecruitmentState.EXPECTED_INCOME: [CallbackQueryHandler(expected_income_received, pattern="^inc_"),
                                           MessageHandler(filters.TEXT & ~filters.COMMAND, prompt_to_use_button)],
        RecruitmentState.REASON_FOR_LEAVING: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, reason_for_leaving_received)],
        RecruitmentState.PREVIOUS_JOBS_COUNT: [CallbackQueryHandler(previous_jobs_count_received, pattern="^jobs_"),
                                               MessageHandler(filters.TEXT & ~filters.COMMAND, prompt_to_use_button)],
        RecruitmentState.ATTITUDE_TO_SPORT: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, attitude_to_sport_received)],
        RecruitmentState.LIFE_VALUES: [MessageHandler(filters.TEXT & ~filters.COMMAND, life_values_received)],
        RecruitmentState.LIFE_WEAKNESSES: [MessageHandler(filters.TEXT & ~filters.COMMAND, life_weaknesses_received)],
        RecruitmentState.LIFE_GOAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, life_goal_received)],
        RecruitmentState.READING_NOW: [MessageHandler(filters.TEXT & ~filters.COMMAND, reading_now_received)],
        RecruitmentState.JUDGED_BEFORE: [CallbackQueryHandler(judged_before_received, pattern="^(yes|no)$"),
                                         MessageHandler(filters.TEXT & ~filters.COMMAND, prompt_to_use_button)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
    name="recruitment_conv",
    persistent=True,
    per_message=False,
    conversation_timeout=settings.CONVERSATION_TIMEOUT_SECONDS
)