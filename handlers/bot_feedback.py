import html
import logging

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler,
    MessageHandler,
    CommandHandler,
    filters,
)
from telegram.constants import ParseMode

from models import MainMenuState
from core import settings
from utils.helpers import get_user_data_from_update, add_to_sheets_queue, get_now, safe_answer_callback_query, \
    send_or_edit_message
from handlers.common import cancel

logger = logging.getLogger(__name__)

SELECT_TYPE, AWAIT_DESCRIPTION = range(2)

FEEDBACK_TYPES = {
    "fb_bug": "–û—à–∏–±–∫–∞ (–ë–∞–≥)",
    "fb_suggestion": "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
    "fb_other": "–î—Ä—É–≥–æ–µ"
}


async def start_feedback_submission(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await safe_answer_callback_query(query)
    context.user_data[settings.ACTIVE_MESSAGE_ID_KEY] = query.message.message_id

    keyboard = [
        [InlineKeyboardButton("üêû –û—à–∏–±–∫–∞ (–ë–∞–≥)", callback_data="fb_bug")],
        [InlineKeyboardButton("üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", callback_data="fb_suggestion")],
        [InlineKeyboardButton("üìã –î—Ä—É–≥–æ–µ", callback_data="fb_other")],
    ]

    text = ("–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç–µ –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ! üôè\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–∞—à–µ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:")

    await send_or_edit_message(update, context, text, InlineKeyboardMarkup(keyboard))
    return SELECT_TYPE


async def type_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await safe_answer_callback_query(query)

    feedback_type_code = query.data
    feedback_type_text = FEEDBACK_TYPES.get(feedback_type_code, "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ")
    context.user_data['feedback_type'] = feedback_type_text

    text = (f"–í—ã –≤—ã–±—Ä–∞–ª–∏: <b>{feedback_type_text}</b>.\n\n"
            "–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ –≤–∞—à—É –º—ã—Å–ª—å –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. "
            "–ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞, –æ–ø–∏—à–∏—Ç–µ —à–∞–≥–∏ –¥–ª—è –µ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è.")

    await send_or_edit_message(update, context, text)
    return AWAIT_DESCRIPTION


async def description_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    description = update.message.text
    feedback_type = context.user_data.get('feedback_type', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')
    user_id, user_name, _ = get_user_data_from_update(update)
    timestamp = get_now().strftime("%Y-%m-%d %H:%M:%S")

    row_data = [timestamp, user_name, user_id, feedback_type, description, "–ù–æ–≤–æ–µ"]
    await add_to_sheets_queue(settings.BOT_FEEDBACK_SHEET_NAME, row_data)

    text = "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ! –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–∫–ª–∞–¥. –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –µ–≥–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
    await send_or_edit_message(update, context, text)

    context.user_data.clear()
    return ConversationHandler.END


feedback_submission_handler = ConversationHandler(
    entry_points=[CallbackQueryHandler(start_feedback_submission, pattern="^submit_bot_feedback$")],
    states={
        SELECT_TYPE: [CallbackQueryHandler(type_selected, pattern="^fb_")],
        AWAIT_DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, description_received)],
    },
    fallbacks=[CommandHandler('cancel', cancel)],
    name="bot_feedback_conv",
    per_user=True,
    per_chat=True,
    per_message=False,
)