import html
import time
import logging
import asyncio
from datetime import timedelta

from telegram import Update, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ChatMemberHandler,
    filters,
)
from telegram.constants import ParseMode, ChatMemberStatus
from telegram.error import Forbidden, BadRequest

from models import ExitState
from core import settings, database, stickers
from utils.helpers import (
    get_user_data_from_update,
    safe_answer_callback_query,
    send_or_edit_message,
    add_to_sheets_queue,
    get_now,
    remove_keyboard_from_previous_message
)
from utils.keyboards import (
    RESTAURANT_OPTIONS,
    EXIT_POSITION_OPTIONS,
    DURATION_OPTIONS,
    RATING_OPTIONS,
    TRAINING_OPTIONS,
    FEEDBACK_OPTIONS,
    build_inline_keyboard
)
from handlers.common import cancel

logger = logging.getLogger(__name__)


async def schedule_exit_interview_reminder(context: ContextTypes.DEFAULT_TYPE):
    job_data = context.job.data
    user_id = job_data["user_id"]
    first_check = job_data.get("first_check", True)

    if await database.is_survey_completed("exit", user_id):
        logger.info(f"User {user_id} has already completed the exit interview. Reminder job cancelled.")
        return

    if first_check:
        logger.info(f"User {user_id} did not complete exit interview after 3 days. Sending reminder.")
        try:
            keyboard = InlineKeyboardMarkup(
                [[InlineKeyboardButton("üëã –î–∞, –≥–æ—Ç–æ–≤(–∞) –ø–æ–º–æ—á—å", callback_data=settings.CALLBACK_START_EXIT)]])
            await context.bot.send_message(
                user_id,
                "–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –Ω–∞—à–µ–π –ø—Ä–æ—Å—å–±–µ –ø—Ä–æ–π—Ç–∏ –Ω–µ–±–æ–ª—å—à–æ–π –æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ —É–≤–æ–ª—å–Ω–µ–Ω–∏—è. –¢–≤–æ–π –æ–ø—ã—Ç –æ—á–µ–Ω—å –≤–∞–∂–µ–Ω –¥–ª—è –Ω–∞—Å! üôè",
                reply_markup=keyboard
            )
            context.job_queue.run_once(
                schedule_exit_interview_reminder,
                when=timedelta(days=3),
                data={"user_id": user_id, "first_check": False},
                name=f"exit_delete_check_{user_id}"
            )
        except (Forbidden, BadRequest):
            logger.warning(f"Could not send exit interview reminder to {user_id}. Deleting user data now.")
            await database.delete_user_data(user_id)
    else:
        logger.warning(f"User {user_id} did not complete exit interview after another 3 days. Deleting user data.")
        await database.delete_user_data(user_id)


async def handle_chat_member(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.chat_member or not update.chat_member.new_chat_member or not update.chat_member.new_chat_member.user:
        return

    member_update = update.chat_member
    target_user = member_update.new_chat_member.user

    if not target_user or target_user.id == context.bot.id:
        return

    new_status = member_update.new_chat_member.status
    if new_status not in (ChatMemberStatus.LEFT, ChatMemberStatus.BANNED):
        return

    target_user_id = target_user.id
    target_user_name = target_user.full_name

    logger.info(f"User {target_user_name} ({target_user_id}) left or was banned from chat {member_update.chat.title}.")

    users_interacted = context.bot_data.get("users_interacted", set())
    if target_user_id not in users_interacted:
        logger.info(f"User {target_user_id} has not interacted with the bot before. Skipping exit interview invite.")
        return

    if context.job_queue.get_jobs_by_name(f"exit_reminder_{target_user_id}"):
        logger.info(f"Exit interview flow is already active for user {target_user_id}. Ignoring new event.")
        return

    try:
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–î–∞, —ç—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å —É–≤–æ–ª—å–Ω–µ–Ω–∏–µ–º", callback_data=settings.CALLBACK_CONFIRM_QUIT)],
            [InlineKeyboardButton("–ù–µ—Ç, –ø—Ä–æ—Å—Ç–æ –≤—ã—à–µ–ª(–∞) –∏–∑ —á–∞—Ç–∞", callback_data=settings.CALLBACK_DECLINE_QUIT)],
        ])
        await context.bot.send_message(
            chat_id=target_user_id,
            text="–ü—Ä–∏–≤–µ—Ç! üëã –ó–∞–º–µ—Ç–∏–ª–∏, —á—Ç–æ —Ç—ã –ø–æ–∫–∏–Ω—É–ª(–∞) –Ω–∞—à —Ä–∞–±–æ—á–∏–π —á–∞—Ç.\n\n"
                 "–ï—Å–ª–∏ —ç—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å —É–≤–æ–ª—å–Ω–µ–Ω–∏–µ–º, –º—ã –±—É–¥–µ–º –æ—á–µ–Ω—å –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å. –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –≤—Ç–æ—Ä—É—é –∫–Ω–æ–ø–∫—É.",
            reply_markup=keyboard
        )
        logger.info(f"Sent exit clarification to user {target_user_name} (ID: {target_user_id}).")

        context.job_queue.run_once(
            schedule_exit_interview_reminder,
            when=timedelta(days=3),
            data={"user_id": target_user_id, "first_check": True},
            name=f"exit_reminder_{target_user_id}"
        )

    except (Forbidden, BadRequest):
        logger.warning(f"Failed to send exit clarification to user {target_user_id} (Forbidden/BadRequest).")
    except Exception as e:
        logger.error(f"Error sending exit clarification to user {target_user_id}: {e}", exc_info=True)


async def remove_exit_jobs(user_id: int, context: ContextTypes.DEFAULT_TYPE):
    jobs_reminder = context.job_queue.get_jobs_by_name(f"exit_reminder_{user_id}")
    jobs_delete = context.job_queue.get_jobs_by_name(f"exit_delete_check_{user_id}")
    for job in jobs_reminder + jobs_delete:
        job.schedule_removal()
    logger.info(f"Removed exit interview reminder/deletion jobs for user {user_id}.")


async def handle_quit_clarification(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await safe_answer_callback_query(query)
    if not query.message:
        return

    user_id = query.from_user.id
    context.user_data[settings.ACTIVE_MESSAGE_ID_KEY] = query.message.message_id

    if query.data == settings.CALLBACK_CONFIRM_QUIT:
        keyboard = InlineKeyboardMarkup(
            [[InlineKeyboardButton("üëã –î–∞, –≥–æ—Ç–æ–≤(–∞) –ø–æ–º–æ—á—å", callback_data=settings.CALLBACK_START_EXIT)]])
        text = ("–ù–∞–º –±—É–¥–µ—Ç —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞—Ç—å... üôè\n\n"
                "–õ—é–±–æ–µ –ø—Ä–æ—â–∞–Ω–∏–µ ‚Äî —ç—Ç–æ –Ω–µ–º–Ω–æ–≥–æ –≥—Ä—É—Å—Ç–Ω–æ, –Ω–æ –º—ã —É–≤–∞–∂–∞–µ–º —Ç–≤–æ–π –≤—ã–±–æ—Ä –∏ –∂–µ–ª–∞–µ–º –æ–≥—Ä–æ–º–Ω–æ–π —É–¥–∞—á–∏ –Ω–∞ –Ω–æ–≤–æ–º –ø—É—Ç–∏! "
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—Å—ë, —á—Ç–æ —Ç—ã —Å–¥–µ–ª–∞–ª(–∞) –¥–ª—è –∫–æ–º–∞–Ω–¥—ã ¬´–ú–∞—Ä—á–µ–ª–ª–∏—Å¬ª. –¢–≤–æ–π –æ–ø—ã—Ç –æ—á–µ–Ω—å —Ü–µ–Ω–µ–Ω –¥–ª—è –Ω–∞—Å.\n\n"
                "–ï—Å–ª–∏ –Ω–µ —Å–ª–æ–∂–Ω–æ, —É–¥–µ–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>–ø–∞—Ä—É –º–∏–Ω—É—Ç</b> –∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ 9 –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ –¥–ª—è –±—É–¥—É—â–∏—Ö –∫–æ–ª–ª–µ–≥ ‚ú®\n\n"
                "–ì–æ—Ç–æ–≤(–∞) –Ω–∞—á–∞—Ç—å?")
        await send_or_edit_message(update, context, text, keyboard)
        context.user_data['chat_id'] = query.message.chat_id

    elif query.data == settings.CALLBACK_DECLINE_QUIT:
        await remove_exit_jobs(user_id, context)
        await send_or_edit_message(update, context, "–ü–æ–Ω—è—Ç–Ω–æ! –°–ø–∞—Å–∏–±–æ –∑–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ. –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! üòä")


async def start_exit_interview_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> ExitState:
    query = update.callback_query
    await safe_answer_callback_query(query)
    context.user_data.clear()
    context.user_data['_in_exit_interview'] = True
    context.user_data['chat_id'] = query.message.chat_id

    await send_or_edit_message(update, context, "–°–ø–∞—Å–∏–±–æ —Ç–µ–±–µ –∑–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø–æ–º–æ—á—å! üôè –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º.", None)

    await asyncio.sleep(1)

    keyboard = build_inline_keyboard(RESTAURANT_OPTIONS, columns=2)
    text = "<b>–í–æ–ø—Ä–æ—Å 1/9</b>\n–í –∫–∞–∫–æ–º <b>—Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ</b> —Ç—ã —Ä–∞–±–æ—Ç–∞–ª(–∞) –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è?"
    await send_or_edit_message(update, context, text, keyboard)

    return ExitState.RESTAURANT


async def exit_restaurant_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE) -> ExitState:
    query = update.callback_query
    await safe_answer_callback_query(query)
    restaurant = next((b[0] for b in RESTAURANT_OPTIONS if b[1] == query.data), "N/A")
    restaurant_code = query.data.replace("res_", "")
    context.user_data["exit_restaurant"] = restaurant
    context.user_data["exit_restaurant_code"] = restaurant_code
    keyboard = build_inline_keyboard(EXIT_POSITION_OPTIONS, columns=2)
    text = f"–†–µ—Å—Ç–æ—Ä–∞–Ω: <b>{html.escape(restaurant)}</b>.\n\n<b>–í–æ–ø—Ä–æ—Å 2/9</b>\n–ù–∞ –∫–∞–∫–æ–π <b>–¥–æ–ª–∂–Ω–æ—Å—Ç–∏</b> —Ç—ã —Ä–∞–±–æ—Ç–∞–ª(–∞)?"
    await send_or_edit_message(update, context, text, keyboard)
    return ExitState.POSITION


async def exit_position_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE) -> ExitState:
    query = update.callback_query
    await safe_answer_callback_query(query)
    position = next((b[0] for b in EXIT_POSITION_OPTIONS if b[1] == query.data), "N/A")
    context.user_data["exit_position"] = position
    keyboard = build_inline_keyboard(DURATION_OPTIONS, columns=3)
    text = f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: <b>{html.escape(position)}</b>.\n\n<b>–í–æ–ø—Ä–æ—Å 3/9</b>\n–ö–∞–∫ <b>–¥–æ–ª–≥–æ</b> —Ç—ã –ø—Ä–æ—Ä–∞–±–æ—Ç–∞–ª(–∞) –≤ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏?"
    await send_or_edit_message(update, context, text, keyboard)
    return ExitState.DURATION


async def exit_duration_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE) -> ExitState:
    query = update.callback_query
    await safe_answer_callback_query(query)
    duration = next((b[0] for b in DURATION_OPTIONS if b[1] == query.data), "N/A")
    context.user_data["exit_duration"] = duration
    text = f"–°—Ç–∞–∂: <b>{html.escape(duration)}</b>.\n\n<b>–í–æ–ø—Ä–æ—Å 4/9</b>\n–ß—Ç–æ —Å—Ç–∞–ª–æ <b>–æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–∏—á–∏–Ω–æ–π</b> —Ç–≤–æ–µ–≥–æ —Ä–µ—à–µ–Ω–∏—è —É–π—Ç–∏? (–ë—É–¥–µ–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã –∑–∞ —á–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç)"
    await send_or_edit_message(update, context, text)
    return ExitState.AWAITING_REASON


async def exit_reason_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> ExitState:
    context.user_data["exit_reason"] = update.message.text.strip()
    text = "–°–ø–∞—Å–∏–±–æ!\n\n" \
           "<b>–í–æ–ø—Ä–æ—Å 5/9</b>\n–ß—Ç–æ, –ø–æ-—Ç–≤–æ–µ–º—É, –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã <b>—É–ª—É—á—à–∏—Ç—å</b> –≤ –Ω–∞—à–µ–π —Ä–∞–±–æ—Ç–µ –∏–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö?"
    await send_or_edit_message(update, context, text)
    return ExitState.AWAITING_IMPROVEMENT


async def exit_improvement_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> ExitState:
    context.user_data["exit_improvement"] = update.message.text.strip()
    keyboard = build_inline_keyboard(RATING_OPTIONS, columns=3)
    text = "–û—Ç–ª–∏—á–Ω—ã–µ –∏–¥–µ–∏, —Å–ø–∞—Å–∏–±–æ!\n\n" \
           "<b>–í–æ–ø—Ä–æ—Å 6/9</b>\n–ö–∞–∫ –±—ã —Ç—ã –æ—Ü–µ–Ω–∏–ª(–∞) –≤–∑–∞–∏–º–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è –∏ <b>–ø–æ–¥–¥–µ—Ä–∂–∫—É</b> —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã —Ç–≤–æ–µ–≥–æ <b>–Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è</b>?"
    await send_or_edit_message(update, context, text, keyboard)
    return ExitState.LEADERSHIP


async def exit_leadership_rated(update: Update, context: ContextTypes.DEFAULT_TYPE) -> ExitState:
    query = update.callback_query
    await safe_answer_callback_query(query)
    rating = next((b[0] for b in RATING_OPTIONS if b[1] == query.data), "N/A")
    context.user_data["exit_leadership_rating"] = rating
    keyboard = build_inline_keyboard(TRAINING_OPTIONS, columns=2)
    text = f"–û—Ü–µ–Ω–∫–∞ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é: <b>{html.escape(rating)}</b>.\n\n<b>–í–æ–ø—Ä–æ—Å 7/9</b>\n–ù–∞—Å–∫–æ–ª—å–∫–æ <b>–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º</b> –±—ã–ª–æ <b>–æ–±—É—á–µ–Ω–∏–µ</b>, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã –ø–æ–ª—É—á–∏–ª(–∞) –¥–ª—è —Ä–∞–±–æ—Ç—ã?"
    await send_or_edit_message(update, context, text, keyboard)
    return ExitState.TRAINING


async def exit_training_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> ExitState:
    query = update.callback_query
    await safe_answer_callback_query(query)
    training = next((b[0] for b in TRAINING_OPTIONS if b[1] == query.data), "N/A")
    context.user_data["exit_training_rating"] = training
    keyboard = build_inline_keyboard(FEEDBACK_OPTIONS, columns=2)
    text = f"–û—Ü–µ–Ω–∫–∞ –æ–±—É—á–µ–Ω–∏—è: <b>{html.escape(training)}</b>.\n\n<b>–í–æ–ø—Ä–æ—Å 8/9</b>\n–ö–∞–∫ —á–∞—Å—Ç–æ —Ç—ã –ø–æ–ª—É—á–∞–ª(–∞) <b>–æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å</b> –æ —Å–≤–æ–µ–π —Ä–∞–±–æ—Ç–µ?"
    await send_or_edit_message(update, context, text, keyboard)
    return ExitState.FEEDBACK


async def exit_feedback_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> ExitState:
    query = update.callback_query
    await safe_answer_callback_query(query)
    feedback = next((b[0] for b in FEEDBACK_OPTIONS if b[1] == query.data), "N/A")
    context.user_data["exit_feedback_freq"] = feedback
    text = f"–ß–∞—Å—Ç–æ—Ç–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: <b>{html.escape(feedback)}</b>. –û—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥! üèÅ\n\n<b>–í–æ–ø—Ä–æ—Å 9/9</b>\n–ï—Å—Ç—å –ª–∏ <b>—á—Ç–æ-—Ç–æ –µ—â–µ</b>, —á—Ç–æ —Ç—ã —Ö–æ—Ç–µ–ª(–∞) –±—ã –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –ø–æ–∂–µ–ª–∞—Ç—å –±—ã–≤—à–∏–º –∫–æ–ª–ª–µ–≥–∞–º?"
    await send_or_edit_message(update, context, text)
    return ExitState.AWAITING_COMMENTS


async def exit_comments_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["exit_comments"] = update.message.text.strip()
    user_id, user_name, _ = get_user_data_from_update(update)
    data = context.user_data
    restaurant_code = data.get("exit_restaurant_code")
    timestamp = get_now().strftime("%Y-%m-%d %H:%M:%S")
    row_data = [
        timestamp, user_name, data.get("exit_restaurant", "N/A"), data.get("exit_position", "N/A"),
        data.get("exit_duration", "N/A"), data.get("exit_reason", "N/A"), data.get("exit_improvement", "N/A"),
        data.get("exit_leadership_rating", "N/A"), data.get("exit_training_rating", "N/A"),
        data.get("exit_feedback_freq", "N/A"), data.get("exit_comments", "N/A")
    ]

    await add_to_sheets_queue(settings.EXIT_INTERVIEW_SHEET_NAME, row_data)
    await database.log_survey_completion('exit', user_id, restaurant_code)
    await database.deactivate_employee(user_id)
    await remove_exit_jobs(user_id, context)

    admin_message = (
        f"üö∂‚Äç‚ôÇÔ∏è <b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –ø—Ä–æ—à–µ–ª Exit-–∏–Ω—Ç–µ—Ä–≤—å—é</b>\n\n"
        f"<b>–ò–º—è:</b> {html.escape(user_name)}\n"
        f"<b>–†–µ—Å—Ç–æ—Ä–∞–Ω:</b> {html.escape(data.get('exit_restaurant', 'N/A'))}\n"
        f"<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {html.escape(data.get('exit_position', 'N/A'))}\n"
        f"<b>–°—Ç–∞–∂:</b> {html.escape(data.get('exit_duration', 'N/A'))}\n\n"
        f"<b>–û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ —É—Ö–æ–¥–∞:</b>\n<pre>{html.escape(data.get('exit_reason', 'N/A'))}</pre>\n\n"
        f"<i>–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π. –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ Google-—Ç–∞–±–ª–∏—Ü—É.</i>"
    )
    for admin_id in settings.ADMIN_IDS:
        try:
            await context.bot.send_message(admin_id, admin_message, parse_mode=ParseMode.HTML)
        except Exception as e:
            logger.error(f"Failed to send exit interview summary to admin {admin_id}: {e}")


    final_text = "‚úÖ <b>–û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ —Ç–µ–±–µ –∑–∞ —É–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏ —á–µ—Å—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã! üôè\n–ñ–µ–ª–∞–µ–º —Ç–µ–±–µ –æ–≥—Ä–æ–º–Ω—ã—Ö —É—Å–ø–µ—Ö–æ–≤ –Ω–∞ –Ω–æ–≤–æ–º –ø—É—Ç–∏! ‚ú®"
    await send_or_edit_message(update, context, final_text)

    await asyncio.sleep(0.5)
    await context.bot.send_sticker(chat_id=user_id, sticker=stickers.SUCCESS_DOG)

    context.user_data.clear()
    return ConversationHandler.END


chat_member_handler = ChatMemberHandler(handle_chat_member, ChatMemberHandler.CHAT_MEMBER)
quit_clarification_handler = CallbackQueryHandler(
    handle_quit_clarification, pattern=f"^({settings.CALLBACK_CONFIRM_QUIT}|{settings.CALLBACK_DECLINE_QUIT})$"
)

exit_interview_conversation_handler = ConversationHandler(
    entry_points=[CallbackQueryHandler(start_exit_interview_callback, pattern=f"^{settings.CALLBACK_START_EXIT}$")],
    states={
        ExitState.RESTAURANT: [CallbackQueryHandler(exit_restaurant_chosen, pattern="^res_")],
        ExitState.POSITION: [CallbackQueryHandler(exit_position_chosen, pattern="^exit_pos_")],
        ExitState.DURATION: [CallbackQueryHandler(exit_duration_chosen, pattern="^dur_")],
        ExitState.AWAITING_REASON: [MessageHandler(filters.TEXT & ~filters.COMMAND, exit_reason_received)],
        ExitState.AWAITING_IMPROVEMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, exit_improvement_received)],
        ExitState.LEADERSHIP: [CallbackQueryHandler(exit_leadership_rated, pattern="^rate_")],
        ExitState.TRAINING: [CallbackQueryHandler(exit_training_received, pattern="^train_")],
        ExitState.FEEDBACK: [CallbackQueryHandler(exit_feedback_received, pattern="^feed_")],
        ExitState.AWAITING_COMMENTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, exit_comments_received)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
    name="exit_interview_conv",
    persistent=True,
    per_message=False,
    conversation_timeout=settings.CONVERSATION_TIMEOUT_SECONDS
)