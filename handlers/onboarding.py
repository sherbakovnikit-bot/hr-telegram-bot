import html
import logging
import asyncio

from telegram import Update, ReplyKeyboardRemove
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
)
from telegram.constants import ParseMode

from models import OnboardingState
from core import settings, database, stickers
from utils.helpers import (
    get_user_data_from_update,
    safe_answer_callback_query,
    send_or_edit_message,
    add_to_sheets_queue,
    add_user_to_interacted,
    get_now,
    format_user_for_sheets,
    cleanup_chat
)
from utils.keyboards import (
    RESTAURANT_OPTIONS,
    ONBOARDING_POSITION_OPTIONS,
    POSITION_LINKS,
    INTEREST_RATING_OPTIONS,
    build_inline_keyboard
)
from handlers.common import cancel, prompt_to_use_button

logger = logging.getLogger(__name__)


async def start_onboarding_flow(update: Update, context: ContextTypes.DEFAULT_TYPE) -> OnboardingState:
    user_id, user_name, _ = get_user_data_from_update(update)
    await add_user_to_interacted(user_id, context)
    context.user_data.clear()
    context.user_data['conversations'] = {'onboarding_conv': True}

    logger.info(f"User {user_name} ({user_id}) started onboarding flow.")

    restaurant_code = ""
    restaurant_name = "–ù–µ —É–∫–∞–∑–∞–Ω"

    if update.callback_query:
        await update.callback_query.message.delete()

    if update.callback_query:
        restaurant_code = await database.get_candidate_restaurant(user_id) or ""
        restaurant_name = next((name for name, code in RESTAURANT_OPTIONS if code.endswith(restaurant_code)),
                               "–ù–µ —É–∫–∞–∑–∞–Ω")
    elif context.args:
        param = context.args[0]
        if not param or not param.startswith("onboard_"):
            if update.message:
                await update.message.reply_text("–û—à–∏–±–∫–∞ –≤ —Å—Å—ã–ª–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.")
            return ConversationHandler.END
        restaurant_code = param.replace("onboard_", "")
        restaurant_name = next((name for name, r_code in RESTAURANT_OPTIONS if r_code.endswith(restaurant_code)),
                               "–ù–µ —É–∫–∞–∑–∞–Ω")

    if restaurant_name == "–ù–µ —É–∫–∞–∑–∞–Ω":
        if update.effective_message:
            await update.effective_message.reply_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.")
        return ConversationHandler.END

    context.user_data['onboarding_restaurant'] = restaurant_name
    context.user_data['onboarding_restaurant_code'] = restaurant_code
    context.user_data['chat_id'] = update.effective_chat.id

    await context.bot.send_sticker(chat_id=user_id, sticker=stickers.GREETING_TEAM)
    await asyncio.sleep(0.5)

    keyboard = build_inline_keyboard(ONBOARDING_POSITION_OPTIONS, columns=2)
    message_text = (
        f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–µ—Ä–≤–æ–π —Å–º–µ–Ω–æ–π –≤ ¬´–ú–∞—Ä—á–µ–ª–ª–∏—Å¬ª! üéâ\n\n"
        f"–¢—ã –Ω–∞—á–∏–Ω–∞–µ—à—å —Å–≤–æ–π –ø—É—Ç—å –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ: <b>{html.escape(restaurant_name)}</b>.\n\n"
        "–ü–µ—Ä–≤–æ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ ‚Äî —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ, –∏ –º—ã –æ—á–µ–Ω—å —Ö–æ—Ç–∏–º –µ–≥–æ —É–∑–Ω–∞—Ç—å!\n\n"
        "<b>–®–∞–≥ 1/4:</b> –ù–∞–ø–æ–º–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞ –∫–∞–∫—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å —Ç—ã –∫ –Ω–∞–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è(–∞—Å—å)?"
    )

    await send_or_edit_message(update, context, message_text, keyboard)

    return OnboardingState.POSITION


async def position_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> OnboardingState:
    query = update.callback_query
    await safe_answer_callback_query(query)

    if query.data == "onboard_pos_Other":
        await send_or_edit_message(update, context, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Å–≤–æ—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å:")
        return OnboardingState.AWAIT_OTHER_POSITION

    chosen_button = next((b for b in ONBOARDING_POSITION_OPTIONS if b[1] == query.data), None)
    position = chosen_button[0] if chosen_button else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
    context.user_data["onboarding_position"] = position

    message_text = (
        f"–ü–æ–∑–∏—Ü–∏—è: <b>{html.escape(position)}</b>. ‚ú®\n\n"
        "<b>–®–∞–≥ 2/4:</b>\n"
        "–ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º <b>–ø–µ—Ä–≤—ã–º –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ–º</b> –ø–æ—Å–ª–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç–µ–ª—å–Ω–æ–π —Å–º–µ–Ω—ã! –ß—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å, —á—Ç–æ —É–¥–∏–≤–∏–ª–æ?"
    )
    await send_or_edit_message(update, context, message_text)
    return OnboardingState.IMPRESSION


async def other_position_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> OnboardingState:
    position = update.message.text.strip()
    context.user_data["onboarding_position"] = position
    context.user_data["onboarding_position_is_other"] = True

    message_text = (
        f"–ü–æ–∑–∏—Ü–∏—è: <b>{html.escape(position)}</b>. ‚ú®\n\n"
        "<b>–®–∞–≥ 2/4:</b>\n"
        "–ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º <b>–ø–µ—Ä–≤—ã–º –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ–º</b> –ø–æ—Å–ª–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç–µ–ª—å–Ω–æ–π —Å–º–µ–Ω—ã! –ß—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å, —á—Ç–æ —É–¥–∏–≤–∏–ª–æ?"
    )
    await send_or_edit_message(update, context, message_text)
    return OnboardingState.IMPRESSION


async def impression_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> OnboardingState:
    context.user_data["onboarding_impression"] = update.message.text.strip()
    keyboard = build_inline_keyboard(INTEREST_RATING_OPTIONS, columns=5)
    text = (
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!\n\n"
        "<b>–®–∞–≥ 3/4:</b>\n"
        "–ê —Ç–µ–ø–µ—Ä—å –æ—Ü–µ–Ω–∏ —Å–≤–æ—é <b>–∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å</b> –≤ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏ —É –Ω–∞—Å –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 (—Å–æ–≤—Å–µ–º –Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ) –¥–æ 10 (–æ—á–µ–Ω—å —Ö–æ—á—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å)."
    )
    await send_or_edit_message(update, context, text, keyboard)
    return OnboardingState.INTEREST_RATING


async def interest_rating_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> OnboardingState:
    query = update.callback_query
    await safe_answer_callback_query(query)
    rating = query.data.replace("onboard_rate_", "")
    context.user_data["onboarding_interest_level"] = rating
    text = (
        f"–¢–≤–æ—è –æ—Ü–µ–Ω–∫–∞: <b>{rating}</b>. –ü—Ä–∏–Ω—è—Ç–æ!\n\n"
        "<b>–®–∞–≥ 4/4:</b>\n"
        "–ß—Ç–æ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ <b>–ø–æ–≤–ª–∏—è–ª–æ –Ω–∞ —Ç–≤–æ—é –æ—Ü–µ–Ω–∫—É</b>?"
    )
    await send_or_edit_message(update, context, text, None)
    return OnboardingState.INTEREST_REASON


async def interest_reason_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["onboarding_interest_reason"] = update.message.text.strip()
    await send_or_edit_message(update, context, "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–≤–æ–π –æ—Ç–≤–µ—Ç...")

    user_id, user_name, _ = get_user_data_from_update(update)
    user = update.effective_user
    data = context.user_data
    restaurant_code = data.get("onboarding_restaurant_code")
    is_other_position = data.get("onboarding_position_is_other", False)
    user_link = format_user_for_sheets(user_id, user_name, user.username)

    row_data = [
        get_now().strftime("%Y-%m-%d %H:%M:%S"),
        user_link,
        data.get("onboarding_restaurant"),
        data.get("onboarding_position"),
        data.get("onboarding_impression"),
        data.get("onboarding_interest_level"),
        data.get("onboarding_interest_reason")
    ]
    await add_to_sheets_queue(settings.ONBOARDING_SHEET_NAME, row_data)
    await database.log_survey_completion('onboarding', user_id, restaurant_code)

    interest_level_str = data.get("onboarding_interest_level", "0")
    message_title = "üìù <b>–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –ø–æ—Å–ª–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç–µ–ª—å–Ω–æ–π —Å–º–µ–Ω—ã</b>"
    try:
        if int(interest_level_str) < 6:
            message_title = f"‚ùóÔ∏èüö© <b>–ù–∏–∑–∫–∞—è –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã! ({interest_level_str}/10)</b>"
    except (ValueError, TypeError):
        pass

    admin_message = (
        f"{message_title}\n\n"
        f"<b>–ö–∞–Ω–¥–∏–¥–∞—Ç:</b> {html.escape(user_name)}\n"
        f"<b>–†–µ—Å—Ç–æ—Ä–∞–Ω:</b> {html.escape(data.get('onboarding_restaurant', 'N/A'))}\n"
        f"<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {html.escape(data.get('onboarding_position', 'N/A'))}\n\n"
        f"<b>‚≠ê –£—Ä–æ–≤–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–∞:</b> {interest_level_str}/10\n"
        f"<b>üí¨ –ü—Ä–∏—á–∏–Ω–∞ –æ—Ü–µ–Ω–∫–∏:</b>\n<pre>{html.escape(data.get('onboarding_interest_reason', 'N/A'))}</pre>\n\n"
        f"<b>üìù –í–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ –æ—Ç —Å–º–µ–Ω—ã:</b>\n<pre>{html.escape(data.get('onboarding_impression', 'N/A'))}</pre>"
    )

    if settings.ADMIN_IDS:
        for admin_id in settings.ADMIN_IDS:
            try:
                await context.bot.send_message(chat_id=admin_id, text=admin_message, parse_mode=ParseMode.HTML)
            except Exception as e:
                logger.error(f"Failed to send onboarding feedback summary to admin {admin_id}: {e}")

    await cleanup_chat(context, user_id)

    position = "–î—Ä—É–≥–æ–µ" if is_other_position else data.get("onboarding_position", "—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
    links_data = POSITION_LINKS.get(position, [])
    critical_links = [item for item in links_data if item.get("is_critical")]
    other_links = [item for item in links_data if not item.get("is_critical") and "url" in item]
    additional_message = next((item.get("additional_message") for item in links_data if "additional_message" in item),
                              "–ñ–µ–ª–∞–µ–º —Ç–µ–±–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞ –∏ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏!")
    final_position_text = data.get("onboarding_position")

    final_message_parts = [
        f"üéâ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É!</b>\n\n"
        f"–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–µ–∑–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ '<b>{html.escape(final_position_text)}</b>':\n"
    ]

    if critical_links:
        final_message_parts.append("\n<b>‚ùóÔ∏è –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∫ –∏–∑—É—á–µ–Ω–∏—é:</b>")
        for link in critical_links:
            final_message_parts.append(f"üîó <a href='{link['url']}'>{html.escape(link['name'])}</a>")

    if other_links:
        final_message_parts.append("\n<b>–ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:</b>")
        for link in other_links:
            final_message_parts.append(f"üîó <a href='{link['url']}'>{html.escape(link['name'])}</a>")

    final_message_parts.append(f"\n\nüîî <b>–í–∞–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç:</b> {html.escape(additional_message)}\n\n")

    final_message = "\n".join(final_message_parts)

    await context.bot.send_sticker(chat_id=user_id, sticker=stickers.ONBOARDING_INFO_DOG)
    await asyncio.sleep(0.5)
    await context.bot.send_message(
        user_id,
        final_message,
        parse_mode=ParseMode.HTML,
        disable_web_page_preview=True
    )

    context.user_data.clear()
    return ConversationHandler.END


onboarding_conversation_handler = ConversationHandler(
    entry_points=[CommandHandler("start", start_onboarding_flow, filters=filters.Regex(r'onboard_'))],
    states={
        OnboardingState.POSITION: [
            CallbackQueryHandler(position_selected, pattern="^onboard_pos_"),
            MessageHandler(filters.TEXT & ~filters.COMMAND, prompt_to_use_button)
        ],
        OnboardingState.AWAIT_OTHER_POSITION: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, other_position_received)],
        OnboardingState.IMPRESSION: [MessageHandler(filters.TEXT & ~filters.COMMAND, impression_received)],
        OnboardingState.INTEREST_RATING: [
            CallbackQueryHandler(interest_rating_received, pattern="^onboard_rate_"),
            MessageHandler(filters.TEXT & ~filters.COMMAND, prompt_to_use_button)
        ],
        OnboardingState.INTEREST_REASON: [MessageHandler(filters.TEXT & ~filters.COMMAND, interest_reason_received)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
    name="onboarding_conv",
    persistent=True,
    per_message=False,
    conversation_timeout=settings.CONVERSATION_TIMEOUT_SECONDS
)