import html
import logging
import asyncio

from telegram import Update, ReplyKeyboardRemove
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
)
from telegram.constants import ParseMode
from telegram.error import Forbidden

from models import MainMenuState, FeedbackState, ManagerFeedbackState
from core import settings, database, stickers
from utils.helpers import (
    safe_answer_callback_query, add_user_to_interacted,
    get_user_data_from_update, send_new_menu_message, send_or_edit_message,
    set_user_commands
)
from utils.keyboards import get_manager_menu_keyboard, get_pending_feedback_keyboard
from handlers.common import handle_blocked_user, cancel

logger = logging.getLogger(__name__)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    if not user:
        return ConversationHandler.END

    if update.callback_query:
        await safe_answer_callback_query(update.callback_query)

    active_conv_names = [
        'recruitment_conv', 'onboarding_conv', 'exit_interview_conv',
        'climate_survey_conv', 'manager_reg_conv'
    ]
    current_conversations = context.user_data.get('conversations', {})
    is_in_another_conv = any(current_conversations.get(name) for name in active_conv_names)

    if is_in_another_conv:
        logger.info(f"User {user.id} tried to use /start while in an active conversation.")
        if update.effective_message:
            await update.effective_message.reply_text(
                "–ö–∞–∂–µ—Ç—Å—è, –≤—ã —Å–µ–π—á–∞—Å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã. "
                "–ß—Ç–æ–±—ã –ø—Ä–µ—Ä–≤–∞—Ç—å –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel.",
                reply_markup=ReplyKeyboardRemove()
            )
        return ConversationHandler.END

    try:
        await set_user_commands(user.id, context.bot)
        await add_user_to_interacted(user.id, context)

        is_manager = await database.is_user_a_manager(user.id)

        if is_manager:
            return await show_manager_menu(update, context)

        await context.bot.send_sticker(chat_id=user.id, sticker=stickers.get_random_greeting())
        await send_or_edit_message(
            update,
            context,
            "Ciao! üëã –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –∫–æ–º–∞–Ω–¥—ã ¬´–ú–∞—Ä—á–µ–ª–ª–∏—Å¬ª.\n\n"
            "–ï—Å–ª–∏ –≤—ã –∫–∞–Ω–¥–∏–¥–∞—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π –∏–ª–∏ QR-–∫–æ–¥–æ–º –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.\n\n"
            "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.",
        )
        return ConversationHandler.END

    except Forbidden:
        return await handle_blocked_user(user.id, context)
    except Exception as e:
        logger.error(f"Error in start handler for user {user.id}: {e}", exc_info=True)
        return ConversationHandler.END


async def show_manager_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    if not user: return ConversationHandler.END

    await context.bot.send_sticker(chat_id=user.id, sticker=stickers.GREETING_WAITER)
    await asyncio.sleep(0.3)

    pending_feedback = await database.get_pending_feedback_for_manager(user.id)
    keyboard = get_manager_menu_keyboard(len(pending_feedback))
    text = f"Ciao, {html.escape(user.first_name)}! üëã\n\n–≠—Ç–æ —Ç–≤–æ–µ –º–µ–Ω—é –º–µ–Ω–µ–¥–∂–µ—Ä–∞."

    await send_new_menu_message(context, user.id, text, keyboard)
    return MainMenuState.MAIN


async def handle_manager_feedback_button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await safe_answer_callback_query(query)
    user_id = query.from_user.id

    pending_tasks = await database.get_pending_feedback_for_manager(user_id)
    if not pending_tasks:
        await query.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.", show_alert=True)
        return MainMenuState.MAIN

    keyboard = get_pending_feedback_keyboard(pending_tasks)
    await send_or_edit_message(update, context, "–í—ã–±–µ—Ä–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—á–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å:",
                               keyboard)

    return MainMenuState.AWAITING_FEEDBACK_CHOICE


async def handle_feedback_candidate_selection(update: Update,
                                              context: ContextTypes.DEFAULT_TYPE) -> ManagerFeedbackState:
    query = update.callback_query

    feedback_id = query.data.replace("fb_", "")
    context.user_data['feedback_id'] = feedback_id

    from handlers.manager_feedback_flow import start_manager_feedback_flow
    return await start_manager_feedback_flow(update, context)


async def start_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    if not user:
        return ConversationHandler.END

    logger.info(f"User {user.id} triggered /start or text message. Routing to general FEEDBACK flow.")

    text = ("–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –∫–æ–º–∞–Ω–¥—ã ¬´–ú–∞—Ä—á–µ–ª–ª–∏—Å¬ª.\n\n"
            "–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∂–∞–ª–æ–±–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —ç—Ç–æ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –∏ —è –ø–µ—Ä–µ–¥–∞–º –≤—Å—ë –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ.\n\n"
            "–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É /cancel.")

    try:
        await context.bot.send_sticker(chat_id=user.id, sticker=stickers.QUESTION_DOG)
        await asyncio.sleep(0.5)

        await send_or_edit_message(update, context, text)

        return FeedbackState.AWAITING_FEEDBACK
    except Forbidden:
        return await handle_blocked_user(user.id, context)


async def receive_and_forward_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    feedback_text = update.message.text
    user_id, user_name, _ = get_user_data_from_update(update)
    logger.info(f"Received general feedback from {user_name}")

    if settings.ADMIN_IDS:
        message = (f"üì© <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b> üì©\n\n"
                   f"<b>–û—Ç:</b> {html.escape(user_name)} (<code>{user_id}</code>)\n"
                   f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n<pre>{html.escape(feedback_text)}</pre>")
        for admin_id in settings.ADMIN_IDS:
            try:
                await context.bot.send_message(admin_id, message, parse_mode=ParseMode.HTML)
            except Exception as e:
                logger.error(f"Failed to forward feedback to admin {admin_id}: {e}")

        await send_or_edit_message(update, context, "–°–ø–∞—Å–∏–±–æ! –ú—ã –ø–æ–ª—É—á–∏–ª–∏ —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–¥–∞–ª–∏ –∫–æ–º–∞–Ω–¥–µ. üôè")
        await asyncio.sleep(0.5)
        await context.bot.send_sticker(chat_id=user_id, sticker=stickers.FEEDBACK_SENT_DOG)
    else:
        await send_or_edit_message(update, context,
                                   "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å–µ–π—á–∞—Å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–∑–∂–µ."
                                   )

    context.user_data.clear()
    return ConversationHandler.END